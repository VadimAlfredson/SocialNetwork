{"version":3,"file":"static/js/975.d9dfd707.chunk.js","mappings":"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","sources":["webpack://react-vadim/./src/components/Users/users.module.css?9211","webpack://react-vadim/./src/components/common/Paginator/paginator.module.css?28dc","Redux/selectors/users_selectors.ts","components/common/Paginator/Paginator.tsx","components/Users/formSearchUsers.tsx","components/Users/Users.tsx","components/Users/UsersContainer.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"usersComponent\":\"users_usersComponent__8nRZo\",\"itemUser\":\"users_itemUser__x5owb\",\"avatar\":\"users_avatar__erVMZ\",\"infoUser\":\"users_infoUser__y2HtR\",\"followButton\":\"users_followButton__ExoVv\",\"massageButton\":\"users_massageButton__-K1Un\",\"buttonStyle\":\"users_buttonStyle__jG05x\",\"nameUser\":\"users_nameUser__9hBV1\",\"statusUser\":\"users_statusUser__F2WyE\",\"navLinkToLogin\":\"users_navLinkToLogin__wH+jC\",\"formSearchBlock\":\"users_formSearchBlock__2WRRL\",\"searchInput\":\"users_searchInput__2r7sY\",\"searchButton\":\"users_searchButton__ZGCpm\",\"searchCheckbox\":\"users_searchCheckbox__LqUAR\",\"searchText\":\"users_searchText__DnfT0\"};","// extracted by mini-css-extract-plugin\nexport default {\"activePage\":\"paginator_activePage__eWc4N\",\"paginator\":\"paginator_paginator__QVHI9\",\"pageNumber\":\"paginator_pageNumber__7A1XW\"};","import {RootState} from \"../reduxStore\";\r\n\r\nexport const getUsers = (state: RootState) => {\r\n    return state.users.users\r\n}\r\nexport const getPageSize = (state: RootState) => {\r\n    return state.users.pageSize\r\n}\r\nexport const getTotalUsersCount = (state: RootState) => {\r\n    return state.users.totalUsersCount\r\n}\r\nexport const getCurrentPage = (state: RootState) => {\r\n    return state.users.currentPage\r\n}\r\nexport const isFetchingSelector = (state: RootState) => {\r\n    return state.users.isFetching\r\n}\r\nexport const getFollowingInProgress = (state: RootState) => {\r\n    return state.users.followingInProgress\r\n}\r\nexport const getTerm = (state: RootState) => {\r\n    return state.users.term\r\n}\r\nexport const getFriends = (state: RootState) => {\r\n    return state.users.friends\r\n}\r\n","import React, {FC, useEffect, useState} from \"react\";\r\nimport s from \"../Paginator/paginator.module.css\"\r\nimport {useAppSelector} from \"../../../Redux/reduxStore\";\r\nimport {\r\n    getCurrentPage,\r\n    getFriends,\r\n    getPageSize,\r\n    getTerm,\r\n    getTotalUsersCount\r\n} from \"../../../Redux/selectors/users_selectors\";\r\n\r\ntype PropsType = {\r\n    onPageChange: (p: number, pageSize: number, term: string, friend?: boolean) => void\r\n}\r\n\r\nlet Paginator: FC<PropsType> = (props) => {\r\n\r\n    const pageSize = useAppSelector(getPageSize)\r\n    const totalUsersCount = useAppSelector(getTotalUsersCount)\r\n    const currentPage = useAppSelector(getCurrentPage)\r\n    const term = useAppSelector(getTerm)\r\n    const friend = useAppSelector(getFriends)\r\n\r\n    let [activePage, setActivePage] = useState(1)\r\n    let firstPage = activePage > 2 ? activePage - 2 : activePage > 1 ? activePage -1 : 1\r\n    let pageCount = Math.ceil(totalUsersCount / pageSize);\r\n    let pages = [];\r\n    for (let i = firstPage; i <= pageCount; i++) {\r\n        pages.push(i)\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (activePage != currentPage) {\r\n        setActivePage(currentPage ? currentPage : 1)\r\n        }\r\n    }, [currentPage])\r\n\r\n    return (\r\n        <div className={s.paginator}>\r\n            {activePage > 3 &&\r\n                <span className={currentPage === 1 ? s.activePage : s.pageNumber}\r\n                                         onClick={() => {\r\n                                             props.onPageChange(1, pageSize, term)\r\n                                             setActivePage(1)\r\n                                         }} key={1}\r\n                            >{1}</span>\r\n                        }\r\n            {activePage > 4 &&\r\n                <button className={s.pageNumber} onClick={() => {\r\n                    setActivePage(activePage => activePage-1)\r\n                    if (friend === true) {\r\n                        props.onPageChange(activePage - 1, pageSize, term, friend)\r\n                    } else {\r\n                        props.onPageChange(activePage - 1, pageSize, term)\r\n                    }\r\n                }}>{`<<`}</button>\r\n            }\r\n            {pages\r\n                .filter(p => p >= firstPage && p <= activePage + 2)\r\n                .map(p => {\r\n                        return <span className={currentPage === p ? s.activePage : s.pageNumber}\r\n                                     onClick={() => {\r\n                                         if (friend === true) {\r\n                                             props.onPageChange(p, pageSize, term, friend)\r\n                                         } else {\r\n                                             props.onPageChange(p, pageSize, term)\r\n                                         }\r\n                                         setActivePage(p)\r\n                                     }} key={p}\r\n                        >{p}</span>\r\n                    }\r\n                )}\r\n\r\n            {activePage < pageCount -2 &&\r\n                <button className={s.pageNumber}\r\n                        onClick={() => {\r\n                            setActivePage(activePage => activePage+1)\r\n                            if (friend === true) {\r\n                                props.onPageChange(activePage + 1, pageSize, term, friend)\r\n                            } else {\r\n                                props.onPageChange(activePage + 1, pageSize, term)\r\n                            }\r\n                        }}\r\n                >{`>>`}</button>\r\n            }\r\n            {activePage < pageCount - 2 &&\r\n                <span className={currentPage === pageCount ? s.activePage : s.pageNumber}\r\n                                         onClick={() => {\r\n                                             props.onPageChange(pageCount, pageSize, term)\r\n                                             setActivePage(pageCount)\r\n                                         }} key={pageCount}\r\n                            >{pageCount}</span>\r\n                        }\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default Paginator\r\n\r\n/*\r\n\r\nlet Paginator: FC<PropsType> = (props) => {\r\n    const pageSize = useAppSelector(state => state.users.pageSize)\r\n    const totalUsersCount = useAppSelector(state => state.users.totalUsersCount)\r\n    const currentPage = useAppSelector(state => state.users.currentPage)\r\n    const term = useAppSelector(state => state.users.term)\r\n    const friend = useAppSelector(state => state.users.friends)\r\n\r\n\r\n    let pageCount = Math.ceil(totalUsersCount / pageSize);\r\n    let pages = [];\r\n    for (let i = 1; i <= pageCount; i++) {\r\n        pages.push(i)\r\n    }\r\n    ;\r\n    let portionSize = 5\r\n    let portionCount = Math.ceil(pageCount / portionSize)\r\n    let [portionNumber, setPortionNumber] = useState(1)\r\n    let leftPortionNumber = (portionNumber - 1) * portionSize + 1\r\n    let rightPortionNumber = portionNumber * portionSize\r\n    return (\r\n        <div className={s.paginator}>\r\n            {portionNumber > 1 &&\r\n                pages\r\n                    .filter(p => p === 1)\r\n                    .map(p => {\r\n                            return <span className={currentPage === p ? s.activePage : s.pageNumber}\r\n                                         onClick={() => {\r\n                                             props.onPageChange(p, pageSize, term)\r\n                                         }} key={p}\r\n                            >{p}</span>\r\n                        }\r\n                    )\r\n            }\r\n            {portionNumber > 1 &&\r\n                <button className={s.pageNumber} onClick={() => {\r\n                    setPortionNumber(portionNumber - 1)\r\n                }}>{`<<`}</button>\r\n            }\r\n            {pages\r\n                .filter(p => p >= leftPortionNumber && p <= rightPortionNumber)\r\n                .map(p => {\r\n                        return <span className={currentPage === p ? s.activePage : s.pageNumber}\r\n                                     onClick={() => {\r\n                                         if (friend === true) {\r\n                                             props.onPageChange(p, pageSize, term, friend)\r\n                                         } else {\r\n                                             props.onPageChange(p, pageSize, term)\r\n                                         }\r\n                                     }} key={p}\r\n                        >{p}</span>\r\n                    }\r\n                )}\r\n\r\n            {portionCount > portionNumber &&\r\n                <button className={s.pageNumber}\r\n                        onClick={() => {\r\n                            setPortionNumber(portionNumber + 1)\r\n                        }}\r\n                >{`>>`}</button>\r\n            }\r\n            {portionCount > portionNumber &&\r\n                pages\r\n                    .filter(p => p === pageCount)\r\n                    .map(p => {\r\n                            // @ts-ignore\r\n                            return <span className={currentPage === p ? s.activePage : s.pageNumber}\r\n                                         onClick={() => {\r\n                                             props.onPageChange(p, pageSize, term)\r\n                                         }} key={p}\r\n                            >{p}</span>\r\n                        }\r\n                    )}\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default Paginator*/\r\n","import React, {FC, useEffect, useState} from \"react\";\r\nimport {Formik} from \"formik\";\r\nimport * as yup from \"yup\";\r\nimport s from './users.module.css';\r\nimport {useAppSelector} from \"../../Redux/reduxStore\";\r\n\r\ntype PropsType = {\r\n    onUsersChange: (pageNumber: number, pageSize: number, term: string, friends: boolean) => void\r\n}\r\n\r\nconst FormSearchUsers: FC<PropsType> = (props) => {\r\n    const pageSize =  useAppSelector(state => state.users.pageSize)\r\n    const validationSchema = yup.object().shape({\r\n        search: yup.string(),\r\n    })\r\n\r\n    return <Formik\r\n        initialValues={{\r\n            search: '',\r\n            subscriptionsCheckbox: false,\r\n        }}\r\n        validateOnBlur\r\n        onSubmit={(values => {\r\n            console.log(values)\r\n            props.onUsersChange(1, pageSize, values.search, values.subscriptionsCheckbox)\r\n        })}\r\n        validationSchema={validationSchema}\r\n    >\r\n        {({\r\n              values,\r\n              errors,\r\n              touched,\r\n              handleBlur,\r\n              handleChange,\r\n              isValid,\r\n              handleSubmit,\r\n              dirty\r\n          }) => (\r\n            <div className={s.formSearchBlock}>\r\n                <input\r\n                    className={s.searchInput}\r\n                    type={'text'}\r\n                    name={'search'}\r\n                    onChange={handleChange}\r\n                    onBlur={handleBlur}\r\n                    value={values.search}\r\n                    placeholder={'text'}\r\n                />\r\n                <button\r\n                    className={s.searchButton}\r\n                    /*disabled={!isValid}*/\r\n                    onClick={() => {\r\n                        handleSubmit()\r\n                    }}\r\n                    type={'submit'}\r\n                >Search\r\n                </button>\r\n                <div className={s.searchCheckbox}>\r\n                    <div className={''}>\r\n                        <input\r\n                            type={'checkbox'}\r\n                            name={'subscriptionsCheckbox'}\r\n                            onChange={handleChange}\r\n                            onBlur={handleBlur}\r\n                            value={`${values.subscriptionsCheckbox}`}\r\n                        />\r\n                    </div>\r\n                </div>\r\n                <div className={s.searchText}>Only subscriptions</div>\r\n            </div>\r\n        )}\r\n    </Formik>\r\n};\r\n\r\nexport default FormSearchUsers\r\n","import React, {FC, useEffect, useState} from \"react\";\r\nimport {onChangeUsersThunkCreator, onFollowChangeThunkCreator, UserType} from \"../../Redux/reducers/users_reducers\";\r\nimport s from \"../Users/users.module.css\"\r\nimport {NavLink, useLocation, useNavigate} from \"react-router-dom\";\r\nimport Paginator from \"../common/Paginator/Paginator\";\r\nimport Preloader from \"../common/Preloader/Preloader\";\r\nimport {putDialogUserThunkCreator} from \"../../Redux/reducers/dialogs_reducer\";\r\nimport FormSearchUsers from \"./formSearchUsers\";\r\nimport {useAppDispatch, useAppSelector} from \"../../Redux/reduxStore\";\r\nimport {\r\n    getCurrentPage,\r\n    getFollowingInProgress,\r\n    getFriends, getPageSize,\r\n    getTerm,\r\n    getUsers,\r\n    isFetchingSelector\r\n} from \"../../Redux/selectors/users_selectors\";\r\nimport {isAuthSelector} from \"../../Redux/selectors/auth_selectors\";\r\n\r\n\r\nlet Users: FC = (props) => {\r\n    const users = useAppSelector(getUsers)\r\n    const followingInProgress = useAppSelector(getFollowingInProgress)\r\n    const isAuth = useAppSelector(isAuthSelector)\r\n    const isFetching = useAppSelector(isFetchingSelector)\r\n    const term = useAppSelector(getTerm)\r\n    const friends = useAppSelector(getFriends)\r\n    const pageSize = useAppSelector(getPageSize)\r\n    const currentPage = useAppSelector(getCurrentPage)\r\n\r\n    let [pageNumber, setPageNumber] = useState(currentPage)\r\n\r\n\r\n    const navigate = useNavigate()\r\n    const dispatch = useAppDispatch()\r\n    let location = useLocation()\r\n\r\n\r\n    let onUsersChange = (pageNumber: number, pageSize: number, termSearch: string, friend?: boolean) => {\r\n        /*dispatch(onChangeUsersThunkCreator(pageNumber, pageSize, term, friend))*/\r\n        navigate({\r\n            pathname: '/users',\r\n            search: termSearch || friend || pageNumber ? \"?\" +\r\n                (pageNumber ? `pageNumber=${pageNumber}${termSearch || friend ? '&' : ''}` : '') +\r\n                (termSearch ? `term=${termSearch}${friend ? '&' : ''}` : '') +\r\n                (friend === true ? `friend=${friend}` : '')\r\n                : ''\r\n        })\r\n        if (currentPage != pageNumber || term != termSearch || friends != !!friend) {\r\n            dispatch(onChangeUsersThunkCreator(pageNumber, pageSize, term || '', friend))\r\n        }\r\n    }\r\n\r\n    let onFollowChange = (userId: number, follow: boolean) => {\r\n        dispatch(onFollowChangeThunkCreator(userId, follow))\r\n    }\r\n\r\n    let onDialogUserChange = (userId: number) => {\r\n        dispatch(putDialogUserThunkCreator(userId))\r\n    }\r\n\r\n    useEffect(() => {\r\n        let {search} = location\r\n        let arr = search.substring(1).split('&').reduce((params: any, param) => {\r\n            let [key, value] = param.split('=');\r\n            params[key] = value ? decodeURIComponent(value.replace(/\\+/g, '')) : \"\";\r\n            return params;\r\n        }, {})\r\n        let friendValue = arr.friend === 'true' ? true : undefined\r\n        if (pageNumber != +arr.pageNumber ||\r\n            term != (arr.term ? arr.term : '') ||\r\n            friends != friendValue) {\r\n            onUsersChange(+arr.pageNumber, pageSize, arr.term || '', friendValue)\r\n        }\r\n    }, [location.search])\r\n\r\n    useEffect(() => {\r\n        navigate({\r\n            pathname: '/users',\r\n            search: term || friends || pageNumber ? \"?\" +\r\n                (pageNumber ? `pageNumber=${pageNumber}${term || friends ? '&' : ''}` : '') +\r\n                (term ? `term=${term}${friends ? '&' : ''}` : '') +\r\n                (friends === true ? `friend=${friends}` : '')\r\n                : ''\r\n        })\r\n    }, [term, friends, pageNumber])\r\n\r\n\r\n    return (\r\n        <div className={s.usersComponent}>\r\n            <Paginator\r\n                onPageChange={onUsersChange}\r\n            />\r\n            <FormSearchUsers\r\n                onUsersChange={onUsersChange}\r\n            />\r\n            {isFetching ? <Preloader/> :\r\n                <div>\r\n                    {\r\n                        users.map((u: UserType) => <div className={s.itemUser} key={u.id}>\r\n                            <div className={s.avatar}>\r\n                                <NavLink to={'/profile/' + u.id}>\r\n                                    <img src={u.photos.small !== null ? u.photos.small :\r\n                                        'https://shapka-youtube.ru/wp-content/uploads/2021/02/avatarka-dlya-skaypa-dlya-parney.jpg'\r\n                                    } alt={'картинка'}/>\r\n                                </NavLink>\r\n                            </div>\r\n                            <div className={s.followButton}>\r\n                                {isAuth ?\r\n                                    <button className={s.buttonStyle}\r\n                                            disabled={followingInProgress.includes(u.id)}\r\n                                            onClick={() => (onFollowChange(u.id, u.followed))\r\n                                            }>{u.followed ? 'Unfollow' : 'Follow'}\r\n                                    </button> : <NavLink className={s.navLinkToLogin} to={\"../login\"}>\r\n                                        Register to subscribe\r\n                                    </NavLink>}\r\n                            </div>\r\n                            <div className={s.massageButton}>\r\n                                {isAuth &&\r\n                                    <NavLink to={`/dialogs/${u.id}`}>\r\n                                        <button className={s.buttonStyle}\r\n                                                onClick={() => {\r\n                                                    onDialogUserChange(u.id)\r\n                                                }}>Message\r\n                                        </button>\r\n                                    </NavLink>}\r\n                            </div>\r\n\r\n                            <div className={s.infoUser}>\r\n                                <div className={s.nameUser}>{u.name}</div>\r\n                                <div className={s.statusUser}>{u.status}</div>\r\n                            </div>\r\n                        </div>)}\r\n                </div>}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Users","import React, {FC, useEffect} from \"react\";\r\nimport Users from \"./Users\";\r\n\r\nconst UsersContainer: FC<{}> = (props) => {\r\n    return <>\r\n        <Users\r\n        />\r\n    </>\r\n\r\n}\r\n\r\nexport default UsersContainer"],"names":["getUsers","state","users","getPageSize","pageSize","getTotalUsersCount","totalUsersCount","getCurrentPage","currentPage","isFetchingSelector","isFetching","getFollowingInProgress","followingInProgress","getTerm","term","getFriends","friends","props","useAppSelector","friend","_useState","useState","_useState2","_slicedToArray","activePage","setActivePage","firstPage","pageCount","Math","ceil","pages","i","push","useEffect","_jsxs","className","s","children","_jsx","onClick","onPageChange","filter","p","map","validationSchema","yup","shape","search","Formik","initialValues","subscriptionsCheckbox","validateOnBlur","onSubmit","values","console","log","onUsersChange","_ref","handleBlur","errors","touched","handleChange","handleSubmit","isValid","dirty","type","name","onChange","onBlur","value","placeholder","concat","isAuth","isAuthSelector","pageNumber","navigate","useNavigate","dispatch","useAppDispatch","location","useLocation","termSearch","pathname","onChangeUsersThunkCreator","arr","substring","split","reduce","params","param","_param$split","_param$split2","key","decodeURIComponent","replace","friendValue","undefined","Paginator","FormSearchUsers","Preloader","u","NavLink","to","id","src","photos","small","alt","disabled","includes","userId","follow","followed","onFollowChangeThunkCreator","putDialogUserThunkCreator","status","_Fragment","Users"],"sourceRoot":""}