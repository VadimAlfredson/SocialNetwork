{"version":3,"file":"static/js/517.c6e02b75.chunk.js","mappings":"oOACA,EAA6B,0BAA7B,EAAoE,0BAApE,EAA4G,2BAA5G,EAAqJ,2BAArJ,EAAgM,6BAAhM,EAA6O,6BAA7O,EAAqR,wBAArR,EAAsT,sBAAtT,EAA2V,4BAA3V,EAAoY,0B,SCmHpY,GAAeA,EAAAA,EAAAA,KANS,SAACC,GAAD,MAA0B,CAC9CC,OAAQD,EAAME,KAAKD,OACnBE,WAAYH,EAAME,KAAKC,WACvBC,aAAeJ,EAAME,KAAKE,gBAGU,CAACC,kBAAAA,EAAAA,IAAzC,EApGiC,SAACC,GAC9B,OAA0BC,EAAAA,EAAAA,UAAiB,IAA3C,eAAOP,EAAP,KAAcQ,EAAd,KAEA,IADAC,EAAAA,EAAAA,YAAU,WAAOT,GAASM,EAAMF,aAAeI,EAASF,EAAMF,cAAgBM,QAAQC,IAAI,eAAe,CAACL,EAAMF,aAAcE,EAAMH,aAChIG,EAAML,OACN,OAAO,SAAC,KAAD,CAAUW,GAAI,cAGzB,IAAMC,EAAmBC,EAAAA,KAAaC,MAAM,CACxCC,MAAOF,EAAAA,KAAaG,SAAS,YAAYD,MAAM,iBAAiBE,UAAU,iBAC1EC,SAAUL,EAAAA,KAAaG,SAAS,cAEpC,OAAO,SAAC,KAAD,CACHG,cAAe,CACXJ,MAAO,GACPG,SAAU,GACVE,UAAU,EACVC,QAAS,IAEbC,gBAAc,EACdC,SAAW,SAAAC,GACPf,QAAQC,IAAIc,GACZnB,EAAMD,kBAAkBoB,EAAOT,MAAOS,EAAON,SAAUM,EAAOJ,SAAUI,EAAOH,UAEnFT,iBAAkBA,EAZf,SAcF,gBACKY,EADL,EACKA,OACAC,EAFL,EAEKA,OACAC,EAHL,EAGKA,QACAC,EAJL,EAIKA,WACAC,EALL,EAKKA,aACAC,EANL,EAMKA,QACAC,EAPL,EAOKA,aACAC,EARL,EAQKA,MARL,OAUG,4BACI,gBAAKC,UAAWC,EAAhB,SAAwD,IAAtB5B,EAAMF,cAAuBE,EAAMF,gBACrE,kBACI6B,UAAWN,EAAQX,OAASU,EAAOV,MAAQkB,EAAgBA,EAC3DC,KAAM,QACNC,KAAM,QACNC,SAAUR,EACVS,OAAQV,EACRW,MAAOd,EAAOT,MACdwB,YAAa,UACdb,EAAQX,OAASU,EAAOV,QAAS,cAAGiB,UAAWC,EAAd,SAAyBR,EAAOV,SAAW,mBAC/E,kBACIiB,UAAYN,EAAQR,UAAYO,EAAOP,SAAYe,EAAgBA,EACnEC,KAAM,WACNC,KAAM,WACNC,SAAUR,EACVS,OAAQV,EACRW,MAAOd,EAAON,SACdqB,YAAa,aACdb,EAAQR,UAAYO,EAAOP,WAAY,cAAGc,UAAWC,EAAd,SAAyBR,EAAOP,YAAc,mBACxF,gBAAKc,UAAWC,EAAhB,UACI,gBAAKD,UAAWC,EAAhB,UACI,kBACIC,KAAM,WACNC,KAAM,WACNC,SAAUR,EACVS,OAAQV,SAKpB,kBACCtB,EAAMH,aACH,4BACI,gBAAK8B,UAAWC,EAAcO,IAAKnC,EAAMH,cACzC,kBACI8B,UAAWN,EAAQL,SAAWI,EAAOJ,QAAUY,EAAgBA,EAC/DC,KAAM,OACNC,KAAM,UACNC,SAAUR,EACVS,OAAQV,EACRW,MAAOd,EAAOH,WAChB,sBAGV,mBACIW,UAAYN,EAAQX,QAAUU,EAAOV,OAASW,EAAQR,WAAaO,EAAOP,SAAYe,EAAgBA,EACtGQ,UAAWZ,IAAYE,EACvBW,QAAS,WACLZ,KAEJI,KAAM,SANV,6BCrFhB,EAPc,WACV,OAAO,iBAAKF,UAAWC,EAAhB,WACP,oCACA,SAAC,EAAD","sources":["webpack://react-vadim/./src/components/login/login.module.css?e6ba","components/login/formLogin.tsx","components/login/login.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"loginBlock\":\"login_loginBlock__GrLby\",\"inputLogin\":\"login_inputLogin__rVtz0\",\"errorsInput\":\"login_errorsInput__H32qx\",\"buttonLogin\":\"login_buttonLogin__-NSsZ\",\"buttonDisable\":\"login_buttonDisable__TOL7c\",\"checkboxBlock\":\"login_checkboxBlock__YB3NM\",\"checkbox\":\"login_checkbox__uPAX8\",\"errors\":\"login_errors__YOsLk\",\"messageError\":\"login_messageError__ob3Ev\",\"imgCaptcha\":\"login_imgCaptcha__s2fvW\"};","import React, {FC, useEffect, useState} from \"react\";\r\nimport {Formik} from \"formik\";\r\nimport * as yup from \"yup\";\r\nimport {connect} from \"react-redux\";\r\nimport {loginThunkCreator} from \"../../Redux/auth_reducers\";\r\nimport {Navigate} from \"react-router-dom\";\r\nimport {AddStateType} from \"../../Redux/reduxStore\";\r\nimport s from './login.module.css';\r\n\r\ntype PropsType = {\r\n    isAuth: boolean\r\n    loginThunkCreator: (email: string, password: string, checkbox: boolean, captcha: string) => void\r\n    captchaURL: null | string\r\n    messageError: string\r\n}\r\n\r\nconst LoginForm: FC<PropsType> = (props) => {\r\n    const [state, setState] = useState<string>('')\r\n    useEffect(() => {state != props.messageError ? setState(props.messageError) : console.log('useEffect')}, [props.messageError, props.captchaURL])\r\n    if (props.isAuth) {\r\n        return <Navigate to={\"/profile/\"}/>\r\n    }\r\n\r\n    const validationSchema = yup.object().shape({\r\n        email: yup.string().required('Required').email('Invalid email').typeError('Invalid email'),\r\n        password: yup.string().required('Required')\r\n    })\r\n    return <Formik\r\n        initialValues={{\r\n            email: '',\r\n            password: '',\r\n            checkbox: false,\r\n            captcha: '',\r\n        }}\r\n        validateOnBlur\r\n        onSubmit={(values => {\r\n            console.log(values)\r\n            props.loginThunkCreator(values.email, values.password, values.checkbox, values.captcha)\r\n        })}\r\n        validationSchema={validationSchema}\r\n    >\r\n        {({\r\n              values,\r\n              errors,\r\n              touched,\r\n              handleBlur,\r\n              handleChange,\r\n              isValid,\r\n              handleSubmit,\r\n              dirty\r\n          }) => (\r\n            <div>\r\n                <div className={s.messageError}>{(props.messageError != '') && props.messageError}</div>\r\n                <input\r\n                    className={touched.email && errors.email ? s.errorsInput : s.inputLogin}\r\n                    type={'email'}\r\n                    name={'email'}\r\n                    onChange={handleChange}\r\n                    onBlur={handleBlur}\r\n                    value={values.email}\r\n                    placeholder={'email'}\r\n                />{touched.email && errors.email && <p className={s.errors}>{errors.email}</p>}<br/>\r\n                <input\r\n                    className={(touched.password && errors.password) ? s.errorsInput : s.inputLogin}\r\n                    type={'password'}\r\n                    name={'password'}\r\n                    onChange={handleChange}\r\n                    onBlur={handleBlur}\r\n                    value={values.password}\r\n                    placeholder={'password'}\r\n                />{touched.password && errors.password && <p className={s.errors}>{errors.password}</p>}<br/>\r\n                <div className={s.checkboxBlock}>\r\n                    <div className={s.checkbox}>\r\n                        <input\r\n                            type={'checkbox'}\r\n                            name={'checkbox'}\r\n                            onChange={handleChange}\r\n                            onBlur={handleBlur}\r\n                            /*value={values.checkbox}*/\r\n                        />\r\n                    </div>\r\n                </div>\r\n                <br/>\r\n                {props.captchaURL &&\r\n                    <div>\r\n                        <img className={s.imgCaptcha} src={props.captchaURL}/>\r\n                        <input\r\n                            className={touched.captcha && errors.captcha ? s.errorsInput : s.inputLogin}\r\n                            type={'text'}\r\n                            name={'captcha'}\r\n                            onChange={handleChange}\r\n                            onBlur={handleBlur}\r\n                            value={values.captcha}\r\n                        /><br/>\r\n                    </div>\r\n                }\r\n                <button\r\n                    className={(touched.email && !errors.email && touched.password && !errors.password) ? s.buttonLogin : s.buttonDisable}\r\n                    disabled={!isValid && !dirty}\r\n                    onClick={() => {\r\n                        handleSubmit()\r\n                    }}\r\n                    type={'submit'}\r\n                >log in\r\n                </button>\r\n            </div>\r\n        )}\r\n    </Formik>\r\n};\r\n\r\nconst mapStateToProps = (state: AddStateType) => ({\r\n    isAuth: state.auth.isAuth,\r\n    captchaURL: state.auth.captchaURL,\r\n    messageError:  state.auth.messageError,\r\n})\r\n\r\nexport default connect(mapStateToProps, {loginThunkCreator})(LoginForm)\r\n","import React from 'react';\r\nimport LoginForm from \"./formLogin\";\r\nimport s from './login.module.css';\r\n\r\nconst Login = () => {\r\n    return <div className={s.loginBlock}>\r\n    <h3>Log in</h3>\r\n    <LoginForm />\r\n    </div>\r\n};\r\n\r\nexport default Login"],"names":["connect","state","isAuth","auth","captchaURL","messageError","loginThunkCreator","props","useState","setState","useEffect","console","log","to","validationSchema","yup","shape","email","required","typeError","password","initialValues","checkbox","captcha","validateOnBlur","onSubmit","values","errors","touched","handleBlur","handleChange","isValid","handleSubmit","dirty","className","s","type","name","onChange","onBlur","value","placeholder","src","disabled","onClick"],"sourceRoot":""}