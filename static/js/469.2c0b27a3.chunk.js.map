{"version":3,"file":"static/js/469.2c0b27a3.chunk.js","mappings":"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","sources":["webpack://react-vadim/./src/components/Setting/Setting.module.css?cb72","components/Setting/formProfileInfo.tsx","components/Setting/Setting.tsx","components/Setting/SettingContainer.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"profileInfoForm\":\"Setting_profileInfoForm__0zC+k\",\"itemFormInput\":\"Setting_itemFormInput__T1BVl\",\"inputUploadPhoto\":\"Setting_inputUploadPhoto__p3uZS\",\"blockUploadPhoto\":\"Setting_blockUploadPhoto__522c0\",\"textUploadPhoto\":\"Setting_textUploadPhoto__8gA17\"};","import React, {FC, useEffect, useState} from \"react\";\r\nimport {Formik} from \"formik\";\r\nimport {connect} from \"react-redux\";\r\nimport {ProfileThunkCreator, userProfileThunkCreator,} from \"../../Redux/profile_reducer\";\r\nimport s from \"./Setting.module.css\"\r\nimport {AddStateType} from \"../../Redux/reduxStore\";\r\nimport * as yup from \"yup\";\r\n\r\nconst ProfileInfoForm: FC<any> = (props) => {\r\n    let [initialValue, setInitialValue] = useState(props.profile)\r\n\r\n    /*const validationSchema = yup.object().shape({\r\n        email: yup.string().typeError('Incorrect email').required('required to fill out')\r\n    })*/\r\n\r\n    return <Formik\r\n        enableReinitialize={true}\r\n        initialValues={{\r\n            fullName: props.profile.fullName,\r\n            lookingForAJob: props.profile.lookingForAJob,\r\n            lookingForAJobDescription: props.profile.lookingForAJobDescription,\r\n            aboutMe: props.profile.aboutMe,\r\n            contacts: props.profile.contacts,\r\n        }}\r\n        validateOnBlur\r\n        onSubmit={(values => {\r\n            console.log(values)\r\n            console.log(props.profile)\r\n            props.ProfileThunkCreator(values)\r\n            props.editModeOnOff(false)\r\n        })}\r\n        /*validationSchema={validationSchema}*/\r\n    >\r\n        {({\r\n              enableReinitialize,\r\n              values,\r\n              errors,\r\n              touched,\r\n              handleBlur,\r\n              handleChange,\r\n              isValid,\r\n              handleSubmit,\r\n              dirty\r\n          }) => (\r\n            <div>\r\n                <input\r\n                    className={s.itemFormInput}\r\n                    type={'text'}\r\n                    name={'fullName'}\r\n                    onChange={handleChange}\r\n                    onBlur={handleBlur}\r\n                    disabled={true}\r\n                    value={values.fullName || props.profile.fullName || ''}\r\n                /><br/>\r\n                <b>Looking for a job:</b>\r\n                <input\r\n                    type={'checkbox'}\r\n                    name={'lookingForAJob'}\r\n                    onChange={handleChange}\r\n                    onBlur={handleBlur}\r\n                /><br/>\r\n                <b>Looking for a job description:</b>\r\n                <input\r\n                    className={s.itemFormInput}\r\n                    type={'text'}\r\n                    name={'lookingForAJobDescription'}\r\n                    onChange={handleChange}\r\n                    onBlur={handleBlur}\r\n                    value={values.lookingForAJobDescription || ''}\r\n                    disabled={!values.lookingForAJob}\r\n                /><br/>\r\n                <b>About Me:</b>\r\n                <input\r\n                    className={s.itemFormInput}\r\n                    type={'text'}\r\n                    name={'aboutMe'}\r\n                    onChange={handleChange}\r\n                    onBlur={handleBlur}\r\n                    value={values.aboutMe || ''}\r\n                /><br/>\r\n                <b>contacts:</b><br/>\r\n                <b>github:</b><input\r\n                className={s.itemFormInput}\r\n                type={'text'}\r\n                name={'contacts.github'}\r\n                onChange={handleChange}\r\n                onBlur={handleBlur}\r\n                value={values.contacts.github || ''}\r\n            /><br/>\r\n                <b>vk:</b><input\r\n                className={s.itemFormInput}\r\n                type={'text'}\r\n                name={'contacts.vk'}\r\n                onChange={handleChange}\r\n                onBlur={handleBlur}\r\n                value={values.contacts.vk || ''}\r\n            /><br/>\r\n                <b>facebook:</b><input\r\n                className={s.itemFormInput}\r\n                type={'text'}\r\n                name={'contacts.facebook'}\r\n                onChange={handleChange}\r\n                onBlur={handleBlur}\r\n                value={values.contacts.facebook || ''}\r\n            /><br/>\r\n                <b>instagram:</b><input\r\n                className={s.itemFormInput}\r\n                type={'text'}\r\n                name={'contacts.instagram'}\r\n                onChange={handleChange}\r\n                onBlur={handleBlur}\r\n                value={values.contacts.instagram || ''}\r\n            /><br/>\r\n                <b>twitter:</b><input\r\n                className={s.itemFormInput}\r\n                type={'text'}\r\n                name={'contacts.twitter'}\r\n                onChange={handleChange}\r\n                onBlur={handleBlur}\r\n                value={values.contacts.twitter || ''}\r\n            /><br/>\r\n                <b>website:</b><input\r\n                className={s.itemFormInput}\r\n                type={'text'}\r\n                name={'contacts.website'}\r\n                onChange={handleChange}\r\n                onBlur={handleBlur}\r\n                value={values.contacts.website || ''}\r\n            /><br/>\r\n                <b>youtube:</b><input\r\n                className={s.itemFormInput}\r\n                type={'text'}\r\n                name={'contacts.youtube'}\r\n                onChange={handleChange}\r\n                onBlur={handleBlur}\r\n                value={values.contacts.youtube || ''}\r\n            /><br/>\r\n                <b>mainLink:</b><input\r\n                className={s.itemFormInput}\r\n                type={'text'}\r\n                name={'contacts.mainLink'}\r\n                onChange={handleChange}\r\n                onBlur={handleBlur}\r\n                value={values.contacts.mainLink || ''}\r\n            /><br/>\r\n                <button\r\n                    disabled={!isValid && !dirty}\r\n                    onClick={() => {\r\n                        handleSubmit()\r\n                    }}\r\n                    type={'submit'}\r\n                >Save\r\n                </button>\r\n            </div>\r\n        )}\r\n    </Formik>\r\n};\r\n\r\nconst mapStateToProps = (state: AddStateType) => ({\r\n    isAuth: state.auth.isAuth,\r\n    ownerId: state.auth.userId,\r\n    profile: state.profilePage.profile,\r\n})\r\n\r\nexport default connect(mapStateToProps, {ProfileThunkCreator, userProfileThunkCreator})(ProfileInfoForm)","import React from \"react\";\r\nimport s from './Setting.module.css';\r\nimport ProfileInfoForm from \"./formProfileInfo\";\r\nimport {ProfileType} from \"../../Redux/profile_reducer\";\r\n\r\ntype PropsType = {\r\n    savePhotoTC: (photo: any) => void\r\n    profile: ProfileType\r\n    defaultPhoto: string\r\n}\r\nconst Setting = (props: PropsType) => {\r\n    const onMainPhotoSelected = (e: any) => {\r\n        if (e.target.files.length) {\r\n            props.savePhotoTC(e.target.files[0])\r\n        }\r\n    }\r\n    return (<div className={s.profileInfoForm}>\r\n        <div>\r\n            <label /*for='inputUploadPhoto'*/ className={s.blockUploadPhoto}>\r\n                <a className={s.textUploadPhoto}>Upload photo</a>\r\n            <img  src={props.profile.photos.large || props.defaultPhoto} alt={'avatar'}/>\r\n            <input id='inputUploadPhoto' type={\"file\"} onChange={onMainPhotoSelected} className={s.inputUploadPhoto}/>\r\n            </label>\r\n        </div>\r\n        <div>\r\n            <ProfileInfoForm />\r\n        </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Setting","import React, {useEffect} from \"react\";\r\nimport s from './Setting.module.css';\r\nimport Setting from \"./Setting\";\r\nimport { connect } from \"react-redux\";\r\nimport {AddStateType} from \"../../Redux/reduxStore\";\r\nimport {ProfileType, savePhotoTC, userProfileThunkCreator} from \"../../Redux/profile_reducer\";\r\n\r\ntype PropsType = {\r\n    ownerId: number\r\n    profile: ProfileType\r\n    userProfileThunkCreator: (id: number) => void\r\n    savePhotoTC: (photo: any) => void\r\n    defaultPhoto: string\r\n}\r\nconst SettingContainer = (props: PropsType) => {\r\n    useEffect(() => {\r\n        if (props.ownerId != props.profile.userId) {\r\n            props.userProfileThunkCreator(props.ownerId)\r\n        }\r\n    })\r\n    return (\r\n        <Setting savePhotoTC={props.savePhotoTC} profile={props.profile} defaultPhoto={props.defaultPhoto}/>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = (state: AddStateType) => {\r\n    return {\r\n        ownerId: state.auth.userId,\r\n        profile: state.profilePage.profile,\r\n        defaultPhoto: state.profilePage.defaultPhoto,\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, {userProfileThunkCreator, savePhotoTC})(SettingContainer)"],"names":["connect","state","isAuth","auth","ownerId","userId","profile","profilePage","ProfileThunkCreator","userProfileThunkCreator","props","useState","enableReinitialize","initialValues","fullName","lookingForAJob","lookingForAJobDescription","aboutMe","contacts","validateOnBlur","onSubmit","values","console","log","editModeOnOff","handleBlur","errors","touched","handleChange","isValid","handleSubmit","dirty","className","s","type","name","onChange","onBlur","disabled","value","github","vk","facebook","instagram","twitter","website","youtube","mainLink","onClick","src","photos","large","defaultPhoto","alt","id","e","target","files","length","savePhotoTC","useEffect"],"sourceRoot":""}