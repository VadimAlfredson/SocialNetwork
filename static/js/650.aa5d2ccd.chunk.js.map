{"version":3,"file":"static/js/650.aa5d2ccd.chunk.js","mappings":"4LACA,EAAuB,mBAAvB,EAAgD,kBAAhD,EAAiF,2BAAjF,EAAsH,sBAAtH,EAAmJ,mBAAnJ,EAAmL,yBAAnL,EAAuN,uB,SC2BvN,EAzBa,SAACA,GACV,OAAkCC,EAAAA,EAAAA,WAAkB,GAApD,eAAKC,EAAL,KAAiBC,EAAjB,KACA,GAAgCF,EAAAA,EAAAA,UAAiBD,EAAMI,WAAvD,eAAKA,EAAL,KAAgBC,EAAhB,KAMA,OACI,iBAAKC,UAAWC,EAAhB,WACI,gBAAKD,UAAWC,EACXC,IAAI,+FACT,gBAAKF,UAAWC,EAAhB,UACI,gBAAKD,UAAWC,EAAhB,SAA4BP,EAAMS,aAEtC,iBAAKH,UAAWJ,EAAaK,EAAeA,EAA5C,UAAqDH,GAAU,gBAC3DE,UAAWC,EACXC,IAAKN,EAAaQ,gCAA6CA,0BAC/DC,QAAS,kBAdjBR,GAAeD,QACfG,EAAcH,EAA6BE,EAAY,EAA5BA,EAAY,IAc/BQ,IAAK,gBCrBrB,GAAgB,WAAa,4BAA4B,cAAgB,+BAA+B,QAAU,0B,UCKrGC,EAAcC,EAAAA,MAAW,SAACd,GAInC,OADAe,QAAQC,IAAI,iBACL,SAAC,KAAD,CACHC,cAAe,CACXC,QAAS,IAEbC,gBAAc,EACdC,SAAU,SAACC,EAAD,GAA0B,IAAhBC,EAAe,EAAfA,UAChBtB,EAAMuB,cAAcF,EAAOH,SAC3BH,QAAQC,IAAIK,EAAOH,SACnBI,EAAU,CAACD,YAAQG,KARpB,SAWF,gBACKH,EADL,EACKA,OACAI,EAFL,EAEKA,WACAC,EAHL,EAGKA,aACAC,EAJL,EAIKA,QACAC,EALL,EAKKA,aACAC,EANL,EAMKA,MANL,OAQG,4BACI,kBACIC,KAAM,QACNC,KAAM,UACNC,SAAUN,EACVO,YAAa,WACb3B,UAAWC,EAAAA,WACX2B,MAAOb,EAAOH,QACdiB,OAAQV,KAEZ,mBACInB,UAAWC,EAAAA,cACX6B,UAAWT,IAAYE,EACvBlB,QAAS,WAAOiB,KAChBE,KAAM,SAJV,2BCXhB,EAjB+B,SAAC9B,GAC5B,IAAIqC,EAAerC,EAAMsC,MAAMC,KAC3B,SAACC,GAAD,OAAO,SAAC,EAAD,CAAM/B,QAAS+B,EAAE/B,QAASL,UAAWoC,EAAEpC,WAAiBoC,EAAEC,OAGrE,OADA1B,QAAQC,IAAI,aAER,4BACI,SAACH,EAAD,CACIU,cAAevB,EAAMuB,iBAEzB,gBAAKjB,UAAWC,EAAAA,KAAhB,SACK8B,QCGjB,GAFyBK,E,QAAAA,KAfH,SAACC,GACnB,MAAO,CACHL,MAAOK,EAAMC,QAAQN,MACrBO,YAAaF,EAAMC,QAAQC,gBAIV,SAACC,GACtB,MAAO,CACHvB,cAAe,SAACL,GACZ4B,GAASC,EAAAA,EAAAA,IAAqB7B,QAKjBwB,CAA6CM,GCtBtE,GAAgB,aAAe,8BAA8B,YAAc,6BAA6B,WAAa,4BAA4B,UAAY,2BAA2B,UAAY,2BAA2B,WAAa,4BAA4B,iBAAmB,kCAAkC,KAAO,sBAAsB,OAAS,wBAAwB,QAAU,yBAAyB,SAAW,0BAA0B,gBAAkB,iCAAiC,aAAe,8BAA8B,eAAiB,gCAAgC,eAAiB,gCAAgC,YAAc,8B,oBCStoBC,EAA+B,SAACjD,GACzC,IAAM8C,GAAWI,EAAAA,EAAAA,MACjB,GAA8BjD,EAAAA,EAAAA,WAAS,GAAvC,eAAKkD,EAAL,KAAeC,EAAf,KASA,GAA0BnD,EAAAA,EAAAA,UAASD,EAAMqD,QAAzC,eAAKA,EAAL,KAAaC,EAAb,KAUA,OAJAC,EAAAA,EAAAA,YAAW,WACPD,EAAUtD,EAAMqD,UACjB,CAACrD,EAAMqD,UAGN,iCACKF,IACG,0BACJ,iBAAMK,cArBU,kBAAMJ,GAAapD,EAAMyD,UAqBzC,SAA0CzD,EAAMqD,QAAU,aAGzDF,IACG,0BACJ,kBACInB,SAlBS,SAAC0B,GAClBJ,EAAUI,EAAEC,cAAczB,QAkBlB0B,WAAW,EACXzB,OA3Ba,WACrBiB,GAAY,GACZN,GAASe,EAAAA,EAAAA,IAAsBR,KA0BvBnB,MAAOmB,U,UCgBjBS,EAA8D,SAAC,GAAkC,IAAjCC,EAAgC,EAAhCA,aAAcC,EAAkB,EAAlBA,aAChF,OAAO,4BACH,yBAAID,EAAJ,OADG,IACqBC,MAS1BC,EAA6B,SAAC,GAAwB,IAAvBrB,EAAsB,EAAtBA,QAASa,EAAa,EAAbA,QAC1C,GAA8BxD,EAAAA,EAAAA,WAAS,GAAvC,eAAKkD,EAAL,UAEA,OAAO,4BACH,4BACI,4BACI,4BAAK,8CAAL,IAAgCP,EAAQsB,eAAiB,MAAQ,QAChEtB,EAAQsB,iBACL,4BAAK,0DAAL,IAA4CtB,EAAQuB,iCAE5D,iBAAK7D,UAAWC,EAAAA,QAAhB,WAA2B,qCAAiBqC,EAAQwB,eAExD,gBAAK9D,UAAWC,EAAAA,SAAhB,UAA+BkD,GAAWN,GAAakB,OAAOC,KAAK1B,EAAQ2B,UAAUC,QAAO,SAAAC,GAAC,OACzF7B,EAAQ2B,SAASE,MAAIlC,KAAI,SAAAkC,GACzB,OAAO,SAACX,EAAD,CAAiBC,aAAcU,EAAGT,aAAcpB,EAAQ2B,SAASE,IAAnDA,YAKjC,EAzEmC,SAACzE,GAChC,OAAwCC,EAAAA,EAAAA,WAAS,GAAjD,eAAKyE,EAAL,KAAoBC,EAApB,KAGA,OADApB,EAAAA,EAAAA,YAAU,WAAOoB,GAAiB,KAAS,CAAC3E,EAAM4C,QAAQgC,SACrD5E,EAAM4C,SAGJ,iBAAKtC,UAAWC,EAAAA,aAAhB,UACFmE,GAAiB1E,EAAM4C,QAAQiC,OAAOC,QACvC,gBAAKxE,UAAWC,EAAAA,UAAaI,QAAS,kBAAMgE,GAAiB,IAC7DnE,IAAKR,EAAM4C,QAAQiC,OAAOC,SAE1B,gBAAKxE,UAAWC,EAAAA,WAAhB,UACI,gBAAKD,UAAWC,EAAAA,UACXC,IAAKR,EAAM4C,QAAQiC,OAAOC,OAAS,4FACxCnE,QAAS,kBAAMX,EAAM4C,QAAQiC,OAAOC,MAAQH,GAAiB,GAAQA,GAAiB,SAG1F,iBAAKrE,UAAWC,EAAAA,YAAhB,WACI,gBAAKD,UAAWC,EAAAA,KAAhB,UAAwB,uBAAIP,EAAM4C,QAAQmC,cAC1C,gBAAKzE,UAAWC,EAAAA,OAAhB,UACI,SAAC0C,EAAD,CAAeI,OAAQrD,EAAMqD,OAAQI,QAASzD,EAAMyD,aAExD,gBAAKnD,UAAWC,EAAAA,SAAhB,SAA6BP,EAAMyD,UAC/B,mBAAQnD,UAAWN,EAAMgF,OAASzE,EAAAA,eAAmBA,EAAAA,aAAgBI,QAAS,WAC1EX,EAAMiF,sBAAsBjF,EAAM4C,QAAQgC,OAAQ5E,EAAMgF,SAD5D,SAEIhF,EAAMgF,OAAS,WAAa,cAEpC,gBAAK1E,UAAWC,EAAAA,SAAhB,SAA6BP,EAAMyD,UAC/B,SAAC,KAAD,CAASyB,GAAI,YAAclF,EAAM4C,QAAQgC,OAAQtE,UAAWC,EAAAA,aAAgBI,QAAS,WACjFX,EAAMmF,2BAA2BnF,EAAM4C,QAAQgC,SADnD,6BAIJ,gBAAKtE,UAAWC,EAAAA,gBAAhB,UACI,SAAC0D,EAAD,CACIrB,QAAS5C,EAAM4C,QACfa,QAASzD,EAAMyD,mBA/BpB,SAAC2B,EAAA,EAAD,KCWf,EAlB+B,SAACpF,GAC5B,OAAO,iBAAKM,UAAWC,EAAAA,eAAhB,WACH,gBAAKD,UAAWC,EAAAA,YAAhB,UACA,SAAC,EAAD,CACakD,QAASzD,EAAMyD,QACfb,QAAS5C,EAAM4C,QACfS,OAAQrD,EAAMqD,OACd2B,OAAQhF,EAAMgF,OACdC,sBAAuBjF,EAAMiF,sBAC7BE,2BAA4BnF,EAAMmF,gCAG/C,gBAAK7E,UAAWC,EAAAA,YAAhB,UACA,SAAC,EAAD,U,uCCwDR,GAAe8E,EAAAA,EAAAA,IAzCU,WACrB,IAAMT,GAAUU,EAAAA,EAAAA,MAAVV,OACFnC,EAAa8C,OAAOX,GACxB7D,QAAQC,KAAIsE,EAAAA,EAAAA,OACZ,IAAMxC,GAAWI,EAAAA,EAAAA,MACXN,GAAU4C,EAAAA,EAAAA,KAAe,SAAA7C,GAAK,OAAIA,EAAMC,QAAQA,WAChDS,GAASmC,EAAAA,EAAAA,KAAe,SAAA7C,GAAK,OAAIA,EAAMC,QAAQS,UAC/C2B,GAASQ,EAAAA,EAAAA,KAAe,SAAA7C,GAAK,OAAIA,EAAMC,QAAQoC,UAC/CS,GAAmBD,EAAAA,EAAAA,KAAgB,SAAA7C,GAAK,OAAIA,EAAM+C,KAAKd,UAC7D7D,QAAQC,IAAI4D,IACZrB,EAAAA,EAAAA,YAAU,WACDd,IAAKA,EAAKgD,GACf3C,GAAS6C,EAAAA,EAAAA,IAAwBlD,IACjCK,GAAS8C,EAAAA,EAAAA,IAAsBnD,IAC/BK,GAAS+C,EAAAA,EAAAA,IAAsBpD,MAChC,CAACmC,KAEJrB,EAAAA,EAAAA,YAAU,cAEP,IAWC,OAAO,SAAC,EAAD,CACSE,UAAWmB,EACXhC,QAASA,EACTS,OAAQA,EACR2B,OAAQA,EACRC,sBAdQ,SAACL,EAAgBI,GACzClC,GAASgD,EAAAA,EAAAA,IAAkClB,EAAQI,IACnDlC,GAASiD,EAAAA,EAAAA,KAA6B,KAatBZ,2BAVa,SAACP,GAC9B9B,GAASkD,EAAAA,EAAAA,IAA0BpB,W,iJCjEvCqB,EAAkB,SAACtD,GACnB,MAAO,CACHuD,OAAQvD,EAAM+C,KAAKQ,SAGdb,EAAmB,SAACc,GAAwB,IAE/CC,EAF8C,0IAGhD,WACI,OAAKC,KAAKrG,MAAMkG,QAGT,SAACC,GAAD,UAAeE,KAAKrG,SAFhB,SAAC,KAAD,CAAUkF,GAAI,eALmB,GAEpBpE,EAAAA,WAWhC,OAF8B4B,EAAAA,EAAAA,IAAQuD,EAARvD,CAAyB0D","sources":["webpack://react-vadim/./src/components/Profile/MyPosts/Post/Post.module.css?87e6","components/Profile/MyPosts/Post/Post.tsx","webpack://react-vadim/./src/components/Profile/MyPosts/MyPosts.module.css?831b","components/Profile/MyPosts/MyPostsForm.tsx","components/Profile/MyPosts/MyPosts.tsx","components/Profile/MyPosts/MyPostsContainer.tsx","webpack://react-vadim/./src/components/Profile/Profile.module.css?b512","components/Profile/ProfileInfo/ProfileStatus.tsx","components/Profile/ProfileInfo/ProfileInfo.tsx","components/Profile/Profile.tsx","components/Profile/ProfileContainer.tsx","components/hoc/witAuthNavigate.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"post\":\"Post_post__akrs7\",\"img\":\"Post_img__LCZ5K\",\"messageBlock\":\"Post_messageBlock__DTacw\",\"message\":\"Post_message__WRFZD\",\"like\":\"Post_like__wbWe1\",\"likeActive\":\"Post_likeActive__cinax\",\"likeIcon\":\"Post_likeIcon__rVuhL\"};","import React, {useEffect, useState} from 'react';\r\nimport s from './Post.module.css';\r\n\r\nconst Post = (props: { message: string, likeCount: number }) => {\r\n    let [likeActive, setLikeActive] = useState<boolean>(false)\r\n    let [likeCount, setLikeCount] = useState<number>(props.likeCount)\r\n    let onClickChange = () => {\r\n        setLikeActive(!likeActive)\r\n        setLikeCount(!likeActive ? likeCount + 1 : likeCount - 1)\r\n    }\r\n\r\n    return (\r\n        <div className={s.post}>\r\n            <img className={s.img}\r\n                 src='https://shapka-youtube.ru/wp-content/uploads/2021/02/avatarka-dlya-skaypa-dlya-parney.jpg'/>\r\n            <div className={s.messageBlock}>\r\n                <div className={s.message}>{props.message}</div>\r\n            </div>\r\n            <div className={likeActive ? s.likeActive : s.like}>{likeCount}<img\r\n                className={s.likeIcon}\r\n                src={likeActive ? process.env.PUBLIC_URL + '/likeActive.png' : process.env.PUBLIC_URL + '/like.png'}\r\n                onClick={() => onClickChange()}\r\n                alt={'like'}/>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Post","// extracted by mini-css-extract-plugin\nexport default {\"createText\":\"MyPosts_createText__T-jsH\",\"buttonAddPost\":\"MyPosts_buttonAddPost__QtbW7\",\"addpost\":\"MyPosts_addpost__+irvX\"};","import React, {Dispatch} from 'react'\r\nimport Post from './Post/Post'\r\nimport s from './MyPosts.module.css'\r\nimport {profilePageType} from \"../../../Redux/profile_reducer\";\r\nimport {Formik} from \"formik\";\r\n\r\nexport const MyPostsForm = React.memo((props: {\r\n    createNewPost: (newPost: string) => void,\r\n}) => {\r\n    console.log('rerenderPost')\r\n    return <Formik\r\n        initialValues={{\r\n            newPost: '' as string\r\n        }}\r\n        validateOnBlur\r\n        onSubmit={(values, {resetForm}) => {\r\n            props.createNewPost(values.newPost)\r\n            console.log(values.newPost)\r\n            resetForm({values: undefined})\r\n        }}\r\n    >\r\n        {({\r\n              values,\r\n              handleBlur,\r\n              handleChange,\r\n              isValid,\r\n              handleSubmit,\r\n              dirty\r\n          }) => (\r\n            <div /*className={s.addpost}*/>\r\n                <input\r\n                    type={'input'}\r\n                    name={'newPost'}\r\n                    onChange={handleChange}\r\n                    placeholder={'Add text'}\r\n                    className={s.createText}\r\n                    value={values.newPost}\r\n                    onBlur={handleBlur}\r\n                />\r\n                <button\r\n                    className={s.buttonAddPost}\r\n                    disabled={!isValid && !dirty}\r\n                    onClick={() => {handleSubmit()}}\r\n                    type={'submit'}\r\n                >Send\r\n                </button>\r\n            </div>\r\n        )}\r\n\r\n    </Formik>\r\n})","import React, {Dispatch, FC} from 'react'\r\nimport Post from './Post/Post'\r\nimport s from './MyPosts.module.css'\r\nimport {postsType} from \"../../../Redux/profile_reducer\";\r\nimport {MyPostsForm} from \"./MyPostsForm\";\r\n\r\ntype PropsType = {\r\n    posts: Array<postsType>,\r\n    createNewPost: (NewPost: string) => void,\r\n}\r\n\r\nconst MyPosts: FC<PropsType> = (props) => {\r\n    let postElements = props.posts.map(\r\n        (p) => <Post message={p.message} likeCount={p.likeCount}  key={p.id}/>\r\n    );\r\n    console.log('Rerender')\r\n    return (\r\n        <div>\r\n            <MyPostsForm\r\n                createNewPost={props.createNewPost}\r\n            />\r\n            <div className={s.post}>\r\n                {postElements}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default MyPosts","import React, {Dispatch} from 'react'\r\nimport {\r\n    AddPostActionCreator,\r\n} from \"../../../Redux/profile_reducer\";\r\nimport MyPosts from \"./MyPosts\";\r\nimport {connect} from \"react-redux\";\r\nimport {RootState} from \"../../../Redux/reduxStore\";\r\n\r\nlet mapStateToProps = (state: RootState) => {\r\n    return {\r\n        posts: state.profile.posts,\r\n        newPostText: state.profile.newPostText\r\n    }\r\n};\r\n\r\nlet mapDispatchToProps = (dispatch: Dispatch<any>) => {\r\n    return {\r\n        createNewPost: (newPost: string) => {\r\n            dispatch(AddPostActionCreator(newPost))\r\n        },\r\n    }\r\n}\r\n\r\nconst MyPostsContainer = connect(mapStateToProps, mapDispatchToProps)(MyPosts)\r\n\r\nexport default MyPostsContainer","// extracted by mini-css-extract-plugin\nexport default {\"profileClass\":\"Profile_profileClass__eq7lO\",\"profileInfo\":\"Profile_profileInfo__OVCEI\",\"avatarSide\":\"Profile_avatarSide__M2bsj\",\"avatarImg\":\"Profile_avatarImg__3Egiz\",\"fullPhoto\":\"Profile_fullPhoto__Yz2Tr\",\"inputPhoto\":\"Profile_inputPhoto__RonUU\",\"labelUpdatePhoto\":\"Profile_labelUpdatePhoto__rIkOS\",\"name\":\"Profile_name__7N8LX\",\"status\":\"Profile_status__pnE9e\",\"aboutMe\":\"Profile_aboutMe__UjygN\",\"editMode\":\"Profile_editMode__71+RX\",\"informationUser\":\"Profile_informationUser__7qzE9\",\"buttonFollow\":\"Profile_buttonFollow__w3i6m\",\"buttonUnfollow\":\"Profile_buttonUnfollow__wXenc\",\"buttonEditInfo\":\"Profile_buttonEditInfo__iPGTb\",\"profilePost\":\"Profile_profilePost__xVBaE\"};","import s from './../Profile.module.css';\r\nimport React, {ChangeEvent, FC, useEffect, useState} from 'react';\r\nimport {useAppDispatch} from \"../../../Redux/reduxStore\";\r\nimport {putStatusThunkCreator} from \"../../../Redux/profile_reducer\";\r\n\r\ntype PropsType = {\r\n    status: string\r\n    isOwner: boolean\r\n}\r\n\r\nexport const ProfileStatus: FC<PropsType> = (props) => {\r\n    const dispatch = useAppDispatch()\r\n    let [editMode, setEditMode] = useState(false)\r\n\r\n    let activeStatusInput = () => setEditMode(!props.isOwner)\r\n\r\n    let deactivateEditMode = () => {\r\n        setEditMode(false)\r\n        dispatch(putStatusThunkCreator(status))\r\n    }\r\n\r\n    let [status, setStatus] = useState(props.status)\r\n\r\n    let onStatusChange = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setStatus(e.currentTarget.value)\r\n    };\r\n\r\n    useEffect( () => {\r\n        setStatus(props.status)\r\n    }, [props.status]);\r\n\r\n    return (\r\n        <div>  {\r\n            !editMode &&\r\n                <div>\r\n            <span onDoubleClick={activeStatusInput} >{props.status || 'status'}</span>\r\n                </div>\r\n            }\r\n            {editMode &&\r\n                <div>\r\n            <input\r\n                onChange={onStatusChange}\r\n                autoFocus={true}\r\n                onBlur={deactivateEditMode}\r\n                value={status}/>\r\n                </div>\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\n/*\r\nexport class ProfileStatus extends React.Component {\r\n    state = {\r\n        editMode: false,\r\n        status: this.props.status\r\n    }\r\n\r\n    activeStatusInput = () => {\r\n        this.setState(\r\n            {editMode: true}\r\n        )\r\n    }\r\n\r\n    deactivateEditMode = () => {\r\n        this.setState(\r\n            {editMode: false}\r\n        );\r\n        this.props.putStatusThunkCreator(this.state.status)\r\n    }\r\n\r\n    onStatusChange = (e) => {\r\n        this.setState({\r\n            status: e.currentTarget.value\r\n        });\r\n    }\r\n\r\n    render () {\r\n        return (\r\n            <div>  {\r\n                !this.state.editMode &&\r\n                <div>\r\n                    <span onDoubleClick={this.activeStatusInput} >{this.props.status || 'status'}</span>\r\n                </div>\r\n            }\r\n                { this.state.editMode &&\r\n                <div>\r\n                    <input\r\n                        onChange={this.onStatusChange}\r\n                        autoFocus={true}\r\n                        onBlur={this.deactivateEditMode}\r\n                        value={this.state.status}/>\r\n                </div>\r\n                }\r\n            </div>\r\n        )\r\n    }\r\n}*/\r\n","import React, {FC, useEffect, useState} from 'react';\r\nimport s from './../Profile.module.css';\r\nimport Preloader from \"../../common/Preloader/Preloader\";\r\nimport {ProfileStatus} from \"./ProfileStatus\";\r\nimport {ProfileType} from \"../../../Redux/profile_reducer\";\r\nimport {NavLink} from \"react-router-dom\";\r\nimport profile from \"../Profile\";\r\n\r\ntype PropsType = {\r\n    profile: ProfileType\r\n    status: string\r\n    isOwner: boolean\r\n    follow: boolean\r\n    onFollowProfileChange: (userId: number, follow: boolean) => void\r\n    onPutDialogOnProfileChange: (userId: number) => void\r\n}\r\n\r\nconst ProfileInfo: FC<PropsType> = (props) => {\r\n    let [showFullPhoto, setShowFullPhoto] = useState(false)\r\n\r\n    useEffect(() => {setShowFullPhoto(false)}, [props.profile.userId])\r\n    if (!props.profile) {\r\n        return <Preloader/>\r\n    }\r\n    return <div className={s.profileClass}>\r\n        {showFullPhoto && props.profile.photos.large &&\r\n        <img className={s.fullPhoto} onClick={() => setShowFullPhoto(false)}\r\n        src={props.profile.photos.large}/>\r\n        }\r\n        <div className={s.avatarSide}>\r\n            <img className={s.avatarImg}\r\n                 src={props.profile.photos.large || 'https://shapka-youtube.ru/wp-content/uploads/2021/02/avatarka-dlya-skaypa-dlya-parney.jpg'}\r\n            onClick={() => props.profile.photos.large ? setShowFullPhoto(true) : setShowFullPhoto(false)}\r\n            />\r\n        </div>\r\n        <div className={s.profileInfo}>\r\n            <div className={s.name}><b>{props.profile.fullName}</b></div>\r\n            <div className={s.status}>\r\n                <ProfileStatus status={props.status} isOwner={props.isOwner}/>\r\n            </div>\r\n            <div className={s.editMode}>{props.isOwner &&\r\n                <button className={props.follow ? s.buttonUnfollow : s.buttonFollow} onClick={() => {\r\n                    props.onFollowProfileChange(props.profile.userId, props.follow)\r\n                }}>{props.follow ? 'Unfollow' : 'Follow'}</button>}\r\n            </div>\r\n            <div className={s.editMode}>{props.isOwner &&\r\n                <NavLink to={\"/dialogs/\" + props.profile.userId} className={s.buttonFollow} onClick={() => {\r\n                    props.onPutDialogOnProfileChange(props.profile.userId)\r\n                }}>Send message</NavLink>}\r\n            </div>\r\n            <div className={s.informationUser}>\r\n                <Information\r\n                    profile={props.profile}\r\n                    isOwner={props.isOwner}\r\n                />\r\n            </div>\r\n        </div>\r\n    </div>\r\n}\r\n\r\nconst Contact: FC<{ contactTitle: string, contactValue: string }> = ({contactTitle, contactValue}) => {\r\n    return <div>\r\n        <b>{contactTitle}:</b> {contactValue}\r\n    </div>\r\n}\r\n\r\ntype InfoProps = {\r\n    profile: any\r\n    isOwner: boolean\r\n}\r\n\r\nconst Information: FC<InfoProps> = ({profile, isOwner}) => {\r\n    let [editMode, setEditMode] = useState(false)\r\n    let editModeOnOff = (value: boolean) => setEditMode(value)\r\n    return <div>\r\n        <div>\r\n            <div>\r\n                <div><b>looking for a job:</b> {profile.lookingForAJob ? \"yes\" : 'no'}</div>\r\n                {profile.lookingForAJob &&\r\n                    <div><b>looking for a job description:</b> {profile.lookingForAJobDescription}</div>}\r\n            </div>{/*}*/}\r\n            <div className={s.aboutMe}><b>About me:</b>{profile.aboutMe}</div>\r\n        </div>\r\n        <div className={s.contacts}>{(!isOwner && editMode) || Object.keys(profile.contacts).filter(i =>\r\n            profile.contacts[i]).map(i => {\r\n            return <Contact key={i} contactTitle={i} contactValue={profile.contacts[i]}/>\r\n        })}</div>\r\n    </div>\r\n}\r\n\r\nexport default ProfileInfo","import React, {FC} from 'react';\r\nimport MyPostsContainer from './MyPosts/MyPostsContainer'\r\nimport ProfileInfo from \"./ProfileInfo/ProfileInfo\";\r\nimport {ProfileType} from \"../../Redux/profile_reducer\";\r\nimport s from \"./Profile.module.css\"\r\n\r\ntype PropsType = {\r\n    profile: ProfileType\r\n    status: string\r\n    isOwner: boolean\r\n    follow: boolean\r\n    onFollowProfileChange: (userId: number, follow: boolean) => void\r\n    onPutDialogOnProfileChange: (userId: number) => void\r\n}\r\n\r\nconst Profile: FC<PropsType> = (props) => {\r\n    return <div className={s.profileContent}>\r\n        <div className={s.profileInfo}>\r\n        <ProfileInfo\r\n                     isOwner={props.isOwner}\r\n                     profile={props.profile}\r\n                     status={props.status}\r\n                     follow={props.follow}\r\n                     onFollowProfileChange={props.onFollowProfileChange}\r\n                     onPutDialogOnProfileChange={props.onPutDialogOnProfileChange}\r\n        />\r\n        </div>\r\n        <div className={s.profilePost}>\r\n        <MyPostsContainer />\r\n        </div>\r\n    </div>\r\n}\r\n\r\nexport default Profile","import React, {FC, useEffect} from 'react';\r\nimport Profile from \"./Profile\";\r\nimport {connect} from \"react-redux\";\r\nimport {\r\n    getStatusThunkCreator,\r\n    putStatusThunkCreator,\r\n    setUserProfile,\r\n    userProfileThunkCreator,\r\n    savePhotoTC,\r\n    getFollowThunkCreator,\r\n    onFollowProfileChangeThunkCreator,\r\n} from \"../../Redux/profile_reducer\";\r\nimport {RootState, useAppDispatch, useAppSelector} from \"../../Redux/reduxStore\";\r\nimport {\r\n    useLocation,\r\n    useNavigate,\r\n    useParams,\r\n} from \"react-router-dom\";\r\nimport {compose} from \"redux\";\r\nimport {withAuthNavigate} from \"../hoc/witAuthNavigate\";\r\nimport {getSubscriptionsThunkCreator} from \"../../Redux/subscriptions_reducers\";\r\nimport {putDialogUserThunkCreator} from \"../../Redux/dialogs_reducer\";\r\n\r\n/*function withRouter(Component: FC) {\r\n    function ComponentWithRouterProp(props: any) {\r\n        let location = useLocation();\r\n        let navigate = useNavigate();\r\n        let params = useParams();\r\n        return (\r\n            <Component\r\n                {...props}\r\n                router={{ location, navigate, params }}\r\n            />\r\n        );\r\n    }\r\n\r\n    return ComponentWithRouterProp;\r\n}\r\n\r\ntype PropsType = {\r\n    router: any\r\n}*/\r\n\r\nconst ProfileContainer = () => {\r\n    let { userId }= useParams<{ userId: string | undefined}>()\r\n    let id: number = Number(userId)\r\n    console.log(useParams())\r\n    const dispatch = useAppDispatch()\r\n    const profile = useAppSelector(state => state.profile.profile)\r\n    const status = useAppSelector(state => state.profile.status)\r\n    const follow = useAppSelector(state => state.profile.follow)\r\n    const authorizedUserId = useAppSelector((state => state.auth.userId))\r\n    console.log(userId)\r\n    useEffect(() => {\r\n        if (!id) {id = authorizedUserId}\r\n        dispatch(userProfileThunkCreator(id))\r\n        dispatch(getStatusThunkCreator(id))\r\n        dispatch(getFollowThunkCreator(id))\r\n    }, [userId])\r\n\r\n    useEffect(() => {\r\n\r\n    }, [])\r\n\r\n    let onFollowProfileChange = (userId: number, follow: boolean) => {\r\n        dispatch(onFollowProfileChangeThunkCreator(userId, follow))\r\n        dispatch(getSubscriptionsThunkCreator(true))\r\n    }\r\n\r\n    let onPutDialogOnProfileChange = (userId: number) => {\r\n        dispatch(putDialogUserThunkCreator(userId))\r\n    }\r\n\r\n        return <Profile\r\n                        isOwner={!!userId}\r\n                        profile={profile}\r\n                        status={status}\r\n                        follow={follow}\r\n                        onFollowProfileChange={onFollowProfileChange}\r\n                        onPutDialogOnProfileChange={onPutDialogOnProfileChange}\r\n        />\r\n\r\n}\r\n\r\nexport default withAuthNavigate(ProfileContainer)","import React, {FC} from 'react'\r\nimport {connect} from \"react-redux\";\r\nimport {Navigate} from 'react-router-dom';\r\nimport {RootState} from \"../../Redux/reduxStore\";\r\n\r\nlet mapStateToProps = (state: RootState) => {\r\n    return {\r\n        isAuth: state.auth.isAuth\r\n    }\r\n}\r\nexport const withAuthNavigate = (Component: FC<any>) => {\r\n\r\n    class NavigateComponent extends React.Component<{isAuth: boolean}> {\r\n        render() {\r\n            if (!this.props.isAuth) {\r\n                return <Navigate to={'/login'}/>\r\n            }\r\n            return <Component {...this.props} />\r\n        }\r\n    }\r\n\r\n    let ConnectWithAuthNavigate = connect(mapStateToProps)(NavigateComponent)\r\n\r\n    return ConnectWithAuthNavigate\r\n}\r\n"],"names":["props","useState","likeActive","setLikeActive","likeCount","setLikeCount","className","s","src","message","process","onClick","alt","MyPostsForm","React","console","log","initialValues","newPost","validateOnBlur","onSubmit","values","resetForm","createNewPost","undefined","handleBlur","handleChange","isValid","handleSubmit","dirty","type","name","onChange","placeholder","value","onBlur","disabled","postElements","posts","map","p","id","connect","state","profile","newPostText","dispatch","AddPostActionCreator","MyPosts","ProfileStatus","useAppDispatch","editMode","setEditMode","status","setStatus","useEffect","onDoubleClick","isOwner","e","currentTarget","autoFocus","putStatusThunkCreator","Contact","contactTitle","contactValue","Information","lookingForAJob","lookingForAJobDescription","aboutMe","Object","keys","contacts","filter","i","showFullPhoto","setShowFullPhoto","userId","photos","large","fullName","follow","onFollowProfileChange","to","onPutDialogOnProfileChange","Preloader","withAuthNavigate","useParams","Number","useAppSelector","authorizedUserId","auth","userProfileThunkCreator","getStatusThunkCreator","getFollowThunkCreator","onFollowProfileChangeThunkCreator","getSubscriptionsThunkCreator","putDialogUserThunkCreator","mapStateToProps","isAuth","Component","NavigateComponent","this"],"sourceRoot":""}