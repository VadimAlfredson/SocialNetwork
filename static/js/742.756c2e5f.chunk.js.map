{"version":3,"file":"static/js/742.756c2e5f.chunk.js","mappings":"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","sources":["webpack://react-vadim/./src/components/Dialogs/Dialogs.module.css?1b2e","components/Dialogs/DialogItem/DialogItem.tsx","components/Dialogs/MessagesItem/MessagesItem.tsx","components/Dialogs/AddMessage/AddMessageForm.tsx","components/Dialogs/AddMessage/AddMessage.tsx","components/Dialogs/Dialogs.tsx","components/Dialogs/DialogsContainer.tsx","components/hoc/witAuthNavigate.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"dialogs\":\"Dialogs_dialogs__GBcEp\",\"dialogsUsers\":\"Dialogs_dialogsUsers__LBmt6\",\"dialogDiv\":\"Dialogs_dialogDiv__uycfj\",\"dialogItem\":\"Dialogs_dialogItem__k9CuM\",\"getMoreDialogs\":\"Dialogs_getMoreDialogs__n6h0D\",\"addDialog\":\"Dialogs_addDialog__OC9fh\",\"active\":\"Dialogs_active__zK1A-\",\"titleMessages\":\"Dialogs_titleMessages__2oe-t\",\"messages\":\"Dialogs_messages__Ly6dr\",\"addMessage\":\"Dialogs_addMessage__+SI4K\",\"inputAddMessage\":\"Dialogs_inputAddMessage__KTTQa\",\"buttonAddMessage\":\"Dialogs_buttonAddMessage__gnvoU\",\"divAddMessage\":\"Dialogs_divAddMessage__EcDqL\",\"iconMessage\":\"Dialogs_iconMessage__L+5-e\",\"message\":\"Dialogs_message__pyaWz\",\"divMessage\":\"Dialogs_divMessage__lpG8t\",\"messageForm\":\"Dialogs_messageForm__5uYWH\",\"divOwnerMessage\":\"Dialogs_divOwnerMessage__vv-7J\",\"ownerMessageForm\":\"Dialogs_ownerMessageForm__zHNC0\",\"textMessage\":\"Dialogs_textMessage__rleMB\",\"ownerTextMessage\":\"Dialogs_ownerTextMessage__Sdmym\",\"h3text\":\"Dialogs_h3text__5icbU\",\"ownerMessageViewed\":\"Dialogs_ownerMessageViewed__boBPG\",\"textMessageViewed\":\"Dialogs_textMessageViewed__i1cxU\",\"deleteMessageOn\":\"Dialogs_deleteMessageOn__Uwr8k\",\"deleteMessageOff\":\"Dialogs_deleteMessageOff__FcrKb\",\"deleteMessageIcon\":\"Dialogs_deleteMessageIcon__unqLp\",\"activeMessage\":\"Dialogs_activeMessage__ie+E3\",\"warningDeleteMessage\":\"Dialogs_warningDeleteMessage__6S48Q\",\"companionName\":\"Dialogs_companionName__AzAMZ\"};","import s from \"../Dialogs.module.css\";\r\nimport {NavLink} from \"react-router-dom\";\r\nimport React from \"react\";\r\n\r\n\r\nexport const DialogItem = (props: {id: number, name: string, onGetMessagesUser: (userId: number) => void}) => {\r\n\r\n    return <NavLink to={\"/dialogs/\" + props.id} onClick={() => {props.onGetMessagesUser(props.id)}}\r\n                 className={dialogsData => dialogsData.isActive ? s.active : s.dialogItem}>\r\n        {props.name}\r\n    </NavLink>\r\n};","import React, {useEffect, useState} from \"react\";\r\nimport s from \"../Dialogs.module.css\";\r\nimport {dialogsType} from \"../../../Redux/dialogs_reducer\";\r\nimport dialogs from \"../Dialogs\";\r\nimport {useAppSelector} from \"../../../Redux/reduxStore\";\r\n\r\nexport const MessagesItem = (props: {\r\n    onDeleteMessageChange: (messageId: string, userId: number) => void,\r\n    message: string,\r\n    senderId: number\r\n    OwnerId: number\r\n    companionIcon: string\r\n    ownerPhoto: string\r\n    viewed: boolean\r\n    messageId: string\r\n    recipientId: number\r\n}) => {\r\n    const defaultPhoto = useAppSelector(state => state.auth.defaultPhoto)\r\n    let [editMessage, setEditMessage] = useState(false)\r\n    let [deleteMessage, setDeleteMessage] = useState(false)\r\n    let message = props.message\r\n        .replace(/&quot;/gi, `\"`)\r\n        .replace(/&#171;/gi, `\"`)\r\n        .replace(/&#187;/gi, `\"`)\r\n        .replace(/&#39;/gi, `'`)\r\n    console.log(props.senderId)\r\n    let senderIcon = props.senderId === props.OwnerId ? (props.ownerPhoto || defaultPhoto) : props.companionIcon\r\n\r\n\r\n    return <div className={editMessage || deleteMessage ? s.activeMessage : s.none}>\r\n        <div className={props.senderId === props.OwnerId ? s.divOwnerMessage : s.divMessage} onClick={() => {\r\n            setEditMessage(!deleteMessage ? editMessage => !editMessage : true)\r\n        }}>\r\n            <div>\r\n                <img className={s.iconMessage} src={senderIcon}/>\r\n            </div>\r\n            <div className={props.senderId === props.OwnerId ?\r\n                s.ownerMessageForm :\r\n                s.messageForm}>\r\n                <a className={props.senderId === props.OwnerId ?\r\n                    (props.viewed ? s.ownerTextMessage : s.ownerMessageViewed) :\r\n                    (props.viewed ? s.textMessage : s.textMessageViewed)\r\n                }>{message}<br/>\r\n                    <div\r\n                        className={editMessage && !deleteMessage ? s.deleteMessageOn : s.deleteMessageOff}\r\n                        onClick={() => {\r\n                            setEditMessage(true)\r\n                            setDeleteMessage(deleteMessage => !deleteMessage)\r\n                        }}>\r\n                        <img className={s.deleteMessageIcon}\r\n                             src={process.env.PUBLIC_URL + '/free-icon-delete-6467128.png'}/>\r\n                    </div>\r\n                </a>\r\n            </div>\r\n            <div className={deleteMessage ? s.warningDeleteMessage : s.deleteMessageOff}>\r\n                Are you sure you want to delete the message?<br/>\r\n                <button onClick={() => {\r\n                    props.onDeleteMessageChange(props.messageId, props.senderId === props.OwnerId ? props.recipientId : props.senderId )\r\n                    setDeleteMessage(false)\r\n                }}>Yes\r\n                </button>\r\n                <button onClick={() => {\r\n                    setDeleteMessage(false)\r\n                }}>No\r\n                </button>\r\n            </div>\r\n        </div>\r\n    </div>\r\n}","import React from \"react\";\r\nimport {dialogsPageType} from \"../../../Redux/dialogs_reducer\";\r\nimport s from \"../Dialogs.module.css\";\r\nimport {Formik} from \"formik\";\r\nimport * as yup from \"yup\";\r\n\r\nexport const AddMessageForm = (props: {\r\n    onMessageSentChange: (userId: number, bodyMessage: string) => void\r\n    dialogId: number\r\n}) => {\r\n    const validationSchema = yup.string()\r\n    let addMessageElement = (values: string) => {\r\n        debugger\r\n        props.onMessageSentChange(props.dialogId, values);\r\n    }\r\n    return <Formik\r\n        initialValues={{\r\n            textMessage: '',\r\n        }}\r\n        validateOnBlur\r\n        onSubmit={(values, {resetForm}) => {\r\n            addMessageElement(values.textMessage)\r\n            console.log(values.textMessage)\r\n            resetForm({values: undefined})\r\n        }}\r\n        validationSchema={validationSchema}\r\n    >\r\n        {({\r\n            values,\r\n            handleBlur,\r\n            handleChange,\r\n            isValid,\r\n            handleSubmit,\r\n            dirty\r\n        }) => (\r\n        <div className={s.divAddMessage}>\r\n            <input\r\n                className={s.inputAddMessage}\r\n                type={'textarea'}\r\n                name={'textMessage'}\r\n                onChange={handleChange}\r\n                onBlur={handleBlur}\r\n                value={values.textMessage}\r\n                placeholder={'Add new message'}\r\n            /><br/>\r\n            <button\r\n                className={s.buttonAddMessage}\r\n                disabled={!isValid && !dirty}\r\n                onClick={() => {handleSubmit()}}\r\n                type={'submit'}\r\n            >Send\r\n            </button>\r\n        </div>\r\n    )}\r\n    </Formik>\r\n}\r\n","import React from \"react\";\r\nimport {dialogsPageType} from \"../../../Redux/dialogs_reducer\";\r\nimport {AddMessageForm} from \"./AddMessageForm\";\r\n\r\nexport const AddMessage = (props: {\r\n    onMessageSentChange: (userId: number, bodyMessage: string) => void\r\n    dialogId: number\r\n}) => {\r\n    return (\r\n        <AddMessageForm\r\n            dialogId={props.dialogId}\r\n            onMessageSentChange={props.onMessageSentChange}\r\n        />\r\n    )\r\n}\r\n","import React, {useEffect, useState} from \"react\";\r\nimport s from './Dialogs.module.css';\r\nimport {DialogItem} from \"./DialogItem/DialogItem\";\r\nimport {MessagesItem} from \"./MessagesItem/MessagesItem\";\r\nimport {AddMessage} from \"./AddMessage/AddMessage\";\r\nimport {\r\n    deleteMessageThunkCreator,\r\n    dialogsType,\r\n    getDialogsThunkCreator,\r\n    getMessagesUserThunkCreator,\r\n    messageType,\r\n    postMessageToUserThunkCreator,\r\n    setCompanionIconAndNameAC,\r\n} from \"../../Redux/dialogs_reducer\";\r\nimport users from \"../Users/Users\";\r\nimport {NavLink} from \"react-router-dom\";\r\nimport {useAppDispatch, useAppSelector} from \"../../Redux/reduxStore\";\r\n\r\n\r\nconst Dialogs = () => {\r\n    const dialogs: dialogsType[] = useAppSelector(state => state.dialogs.dialogs)\r\n    const messages: messageType[] = useAppSelector(state => state.dialogs.messages)\r\n    const isAuth: boolean = useAppSelector(state => state.auth.isAuth)\r\n    const dialogId: number = useAppSelector(state => state.dialogs.dialogId)\r\n    const OwnerId: number = useAppSelector(state => state.auth.userId)\r\n    const defaultPhoto: string = useAppSelector(state => state.dialogs.defaultPhoto)\r\n    const companionIcon: string = useAppSelector(state => state.dialogs.companionIcon)\r\n    const companionName: string = useAppSelector(state => state.dialogs.companionName)\r\n    const companionId: number | null = useAppSelector(state => state.dialogs.companionId)\r\n    const ownerPhoto: string = useAppSelector(state => state.auth.ownerPhoto)\r\n\r\n    const [dialogsCount, setDialogsCount] = useState(10)\r\n\r\n    const dispatch = useAppDispatch()\r\n\r\n\r\n    let onDeleteMessageChange = (messageId: string, userId: number) => {\r\n        debugger\r\n        dispatch(deleteMessageThunkCreator(messageId, userId))\r\n    }\r\n\r\n\r\n    useEffect(() => {\r\n        dispatch(getDialogsThunkCreator())\r\n    }, [])\r\n\r\n    let getCompanionIconAndName = (userId: number) => {\r\n        dialogs.find(i => i.id === userId ?\r\n                dispatch(setCompanionIconAndNameAC({photo: i.photos.large ? i.photos.large : defaultPhoto, userName: i.userName, companionId: i.id})) :\r\n          console.log('sd')\r\n            )\r\n    }\r\n    const onGetMessagesUser = (userId: number) => {\r\n        dispatch(getMessagesUserThunkCreator(userId))\r\n        getCompanionIconAndName(userId)\r\n\r\n    }\r\n    const onMessageSentChange = (userId: number, bodyMessage: string) => {\r\n        dispatch(postMessageToUserThunkCreator(userId, bodyMessage))\r\n    }\r\n\r\n    let [dialogsState, setDialogsState] = useState([] as dialogsType[])\r\n\r\n    useEffect(() => {\r\n        let dialogsArr = [] as dialogsType[]\r\n        if (dialogs.length > 0){\r\n        for (let i = 0; i < (dialogs.length > dialogsCount ? dialogsCount : dialogs.length); i++) {\r\n            dialogsArr.push(dialogs[i])\r\n        }}\r\n        setDialogsState(dialogsArr)\r\n        console.log(dialogsArr)\r\n    }, [dialogs, dialogId, dialogsCount])\r\n\r\n    let dialogUsers =\r\n        dialogs[0] ?\r\n        dialogsState.map(\r\n        d => <DialogItem\r\n            name={d.userName}\r\n            id={d.id}\r\n            key={d.id}\r\n            onGetMessagesUser={onGetMessagesUser}/>\r\n        ) : <NavLink to={'/users'}>Search friends</NavLink>;\r\n\r\n    let messagesItem =\r\n        messages[0] ?\r\n            messages.map(\r\n                m =>\r\n                    <MessagesItem\r\n                        message={m.body}\r\n                        key={m.id}\r\n                        senderId={m.senderId}\r\n                        OwnerId={OwnerId}\r\n                        companionIcon={companionIcon}\r\n                        ownerPhoto={ownerPhoto}\r\n                        viewed={m.viewed}\r\n                        onDeleteMessageChange={onDeleteMessageChange}\r\n                        messageId={m.id}\r\n                        recipientId={m.recipientId}\r\n                    />\r\n            ) : <div><h3 className={s.h3text}>start chatting first</h3></div>\r\n    return (\r\n        <div className={s.dialogs}>\r\n            <div>\r\n                <NavLink to={'/users'} className={s.addDialog}>Add dialog</NavLink>\r\n            <div className={s.dialogsUsers}>\r\n                {dialogUsers}\r\n            </div>{(dialogsCount < dialogs.length) &&\r\n                <div className={s.getMoreDialogs} onClick={() => setDialogsCount(dialogsCount => dialogsCount + 5)}>Get more dialogs</div>}\r\n            </div>\r\n\r\n            <div className={s.messages}>\r\n                <NavLink to={`/profile/${companionId}`} className={s.companionName}>{companionName}</NavLink>\r\n                <div className={s.message}>\r\n                    {messagesItem}\r\n                </div>\r\n                <div className={s.addMessage}>\r\n                    <AddMessage\r\n                        dialogId={dialogId}\r\n                        onMessageSentChange={onMessageSentChange}\r\n                    />\r\n                </div>\r\n            </div>\r\n        </div>\r\n\r\n    )\r\n}\r\n\r\nexport default Dialogs","import React from \"react\";\r\nimport Dialogs from \"./Dialogs\";\r\nimport {compose} from \"redux\";\r\nimport {withAuthNavigate} from \"../hoc/witAuthNavigate\";\r\n\r\n\r\nexport default compose(\r\n    withAuthNavigate\r\n)(Dialogs)","import React, {FC} from 'react'\r\nimport {connect} from \"react-redux\";\r\nimport {Navigate} from 'react-router-dom';\r\nimport {RootState} from \"../../Redux/reduxStore\";\r\n\r\nlet mapStateToProps = (state: RootState) => {\r\n    return {\r\n        isAuth: state.auth.isAuth\r\n    }\r\n}\r\nexport const withAuthNavigate = (Component: FC<any>) => {\r\n\r\n    class NavigateComponent extends React.Component<{isAuth: boolean}> {\r\n        render() {\r\n            if (!this.props.isAuth) {\r\n                return <Navigate to={'/login'}/>\r\n            }\r\n            return <Component {...this.props} />\r\n        }\r\n    }\r\n\r\n    let ConnectWithAuthNavigate = connect(mapStateToProps)(NavigateComponent)\r\n\r\n    return ConnectWithAuthNavigate\r\n}\r\n"],"names":["DialogItem","props","to","id","onClick","onGetMessagesUser","className","dialogsData","isActive","s","name","MessagesItem","defaultPhoto","useAppSelector","state","auth","useState","editMessage","setEditMessage","deleteMessage","setDeleteMessage","message","replace","console","log","senderId","senderIcon","OwnerId","ownerPhoto","companionIcon","src","viewed","process","onDeleteMessageChange","messageId","recipientId","AddMessageForm","validationSchema","yup","initialValues","textMessage","validateOnBlur","onSubmit","values","resetForm","onMessageSentChange","dialogId","addMessageElement","undefined","handleBlur","handleChange","isValid","handleSubmit","dirty","type","onChange","onBlur","value","placeholder","disabled","AddMessage","dialogs","messages","isAuth","userId","companionName","companionId","dialogsCount","setDialogsCount","dispatch","useAppDispatch","deleteMessageThunkCreator","useEffect","getDialogsThunkCreator","getMessagesUserThunkCreator","find","i","setCompanionIconAndNameAC","photo","photos","large","userName","getCompanionIconAndName","dialogsState","setDialogsState","dialogsArr","length","push","dialogUsers","map","d","messagesItem","m","body","bodyMessage","postMessageToUserThunkCreator","compose","withAuthNavigate","Dialogs","mapStateToProps","Component","NavigateComponent","this","React","connect"],"sourceRoot":""}