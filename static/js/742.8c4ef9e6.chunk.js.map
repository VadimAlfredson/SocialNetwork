{"version":3,"file":"static/js/742.8c4ef9e6.chunk.js","mappings":"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","sources":["webpack://react-vadim/./src/components/Dialogs/Dialogs.module.css?1b2e","components/Dialogs/DialogItem/DialogItem.tsx","components/Dialogs/MessagesItem/MessagesItem.tsx","components/Dialogs/AddMessage/AddMessageForm.tsx","components/Dialogs/AddMessage/AddMessage.tsx","components/Dialogs/Dialogs.tsx","components/Dialogs/DialogsContainer.tsx","components/hoc/witAuthNavigate.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"dialogs\":\"Dialogs_dialogs__GBcEp\",\"dialogsUsers\":\"Dialogs_dialogsUsers__LBmt6\",\"dialogDiv\":\"Dialogs_dialogDiv__uycfj\",\"dialogItem\":\"Dialogs_dialogItem__k9CuM\",\"active\":\"Dialogs_active__zK1A-\",\"titleMessages\":\"Dialogs_titleMessages__2oe-t\",\"messages\":\"Dialogs_messages__Ly6dr\",\"addMessage\":\"Dialogs_addMessage__+SI4K\",\"inputAddMessage\":\"Dialogs_inputAddMessage__KTTQa\",\"buttonAddMessage\":\"Dialogs_buttonAddMessage__gnvoU\",\"divAddMessage\":\"Dialogs_divAddMessage__EcDqL\",\"iconMessage\":\"Dialogs_iconMessage__L+5-e\",\"message\":\"Dialogs_message__pyaWz\",\"divMessage\":\"Dialogs_divMessage__lpG8t\",\"messageForm\":\"Dialogs_messageForm__5uYWH\",\"divOwnerMessage\":\"Dialogs_divOwnerMessage__vv-7J\",\"ownerMessageForm\":\"Dialogs_ownerMessageForm__zHNC0\",\"textMessage\":\"Dialogs_textMessage__rleMB\",\"ownerTextMessage\":\"Dialogs_ownerTextMessage__Sdmym\",\"h3text\":\"Dialogs_h3text__5icbU\",\"ownerMessageViewed\":\"Dialogs_ownerMessageViewed__boBPG\",\"textMessageViewed\":\"Dialogs_textMessageViewed__i1cxU\"};","import s from \"../Dialogs.module.css\";\r\nimport {NavLink} from \"react-router-dom\";\r\nimport React from \"react\";\r\n\r\n\r\nexport const DialogItem = (props: {id: number, name: string, onGetMessagesUser: (userId: number) => void}) => {\r\n\r\n    return <NavLink to={\"/dialogs/\" + props.id} onClick={() => {props.onGetMessagesUser(props.id)}}\r\n                 className={dialogsData => dialogsData.isActive ? s.active : s.dialogItem}>\r\n        {props.name}\r\n    </NavLink>\r\n};","import React, {useEffect, useState} from \"react\";\r\nimport s from \"../Dialogs.module.css\";\r\nimport {dialogsType} from \"../../../Redux/dialogs_reducer\";\r\nimport dialogs from \"../Dialogs\";\r\n\r\nexport const MessagesItem = (props: {\r\n    message: string,\r\n    senderId: number\r\n    OwnerId: number\r\n    companionIcon: string\r\n    ownerPhoto: string\r\n    viewed: boolean\r\n}) => {\r\n    let message = props.message\r\n        .replace(/&quot;/gi, `\"`)\r\n        .replace(/&#171;/gi, `\"`)\r\n        .replace(/&#187;/gi, `\"`)\r\n    console.log(props.message)\r\n    let senderIcon = props.senderId === props.OwnerId ? props.ownerPhoto : props.companionIcon\r\n    return <div className={props.senderId === props.OwnerId ? s.divOwnerMessage : s.divMessage}>\r\n        <div>\r\n            <img className={s.iconMessage} src={senderIcon}/>\r\n        </div>\r\n        <div className={props.senderId === props.OwnerId ?\r\n            s.ownerMessageForm :\r\n            s.messageForm}>\r\n            <a className={props.senderId === props.OwnerId ?\r\n                (props.viewed ? s.ownerTextMessage : s.ownerMessageViewed) :\r\n                (props.viewed ? s.textMessage : s.textMessageViewed)\r\n            }>{message}</a>\r\n        </div>\r\n    </div>\r\n}","import React from \"react\";\r\nimport {dialogsPageType} from \"../../../Redux/dialogs_reducer\";\r\nimport s from \"../Dialogs.module.css\";\r\nimport {Formik} from \"formik\";\r\nimport * as yup from \"yup\";\r\n\r\nexport const AddMessageForm = (props: {\r\n    onMessageSentChange: (userId: number, bodyMessage: string) => void\r\n    dialogId: number\r\n}) => {\r\n    const validationSchema = yup.string()\r\n    let addMessageElement = (values: string) => {\r\n        debugger\r\n        props.onMessageSentChange(props.dialogId, values);\r\n    }\r\n    return <Formik\r\n        initialValues={{\r\n            textMessage: '',\r\n        }}\r\n        validateOnBlur\r\n        onSubmit={(values, {resetForm}) => {\r\n            addMessageElement(values.textMessage)\r\n            console.log(values.textMessage)\r\n            resetForm({values: undefined})\r\n        }}\r\n        validationSchema={validationSchema}\r\n    >\r\n        {({\r\n            values,\r\n            handleBlur,\r\n            handleChange,\r\n            isValid,\r\n            handleSubmit,\r\n            dirty\r\n        }) => (\r\n        <div className={s.divAddMessage}>\r\n            <input\r\n                className={s.inputAddMessage}\r\n                type={'textarea'}\r\n                name={'textMessage'}\r\n                onChange={handleChange}\r\n                onBlur={handleBlur}\r\n                value={values.textMessage}\r\n                placeholder={'Add new message'}\r\n            /><br/>\r\n            <button\r\n                className={s.buttonAddMessage}\r\n                disabled={!isValid && !dirty}\r\n                onClick={() => {handleSubmit()}}\r\n                type={'submit'}\r\n            >Send\r\n            </button>\r\n        </div>\r\n    )}\r\n    </Formik>\r\n}\r\n","import React from \"react\";\r\nimport {dialogsPageType} from \"../../../Redux/dialogs_reducer\";\r\nimport {AddMessageForm} from \"./AddMessageForm\";\r\n\r\nexport const AddMessage = (props: {\r\n    onMessageSentChange: (userId: number, bodyMessage: string) => void\r\n    dialogId: number\r\n}) => {\r\n    return (\r\n        <AddMessageForm\r\n            dialogId={props.dialogId}\r\n            onMessageSentChange={props.onMessageSentChange}\r\n        />\r\n    )\r\n}\r\n","import React, {useEffect, useState} from \"react\";\r\nimport s from './Dialogs.module.css';\r\nimport {DialogItem} from \"./DialogItem/DialogItem\";\r\nimport {MessagesItem} from \"./MessagesItem/MessagesItem\";\r\nimport {AddMessage} from \"./AddMessage/AddMessage\";\r\nimport {\r\n    dialogsType, messageType,\r\n} from \"../../Redux/dialogs_reducer\";\r\nimport users from \"../Users/Users\";\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\n\r\nconst Dialogs = (props: {\r\n                     dialogs: dialogsType[],\r\n                     messages: messageType[],\r\n                     isAuth: boolean\r\n                     getDialogsThunkCreator: () => void\r\n                     getMessagesUserThunkCreator: (userId: number) => void\r\n                     postMessageToUserThunkCreator: (userId: number, bodyMessage: string) => void\r\n                     dialogId: number\r\n                     OwnerId: number\r\n                     companionIcon: string\r\n                     setCompanionIconAC: (photo: string | null) => void\r\n                     defaultPhoto: string\r\n                     ownerPhoto: string\r\n                 }\r\n) => {\r\n    /*    const [dialogs, setDialogs] = useState(props.dialogs);\r\n        const [messages, setMessages] = useState(props.messages);*/\r\n    /*props.getDialogsThunkCreator()*/\r\n    useEffect(() => {\r\n        props.getDialogsThunkCreator()\r\n    }, [])\r\n    let getCompanionIcon = (userId: number) => {\r\n        props.dialogs.find(i =>\r\n            i.id === userId ?\r\n                props.setCompanionIconAC(i.photos.large ? i.photos.large : props.defaultPhoto) :\r\n                props.setCompanionIconAC(props.defaultPhoto))\r\n    }\r\n    const onGetMessagesUser = (userId: number) => {\r\n        props.getMessagesUserThunkCreator(userId)\r\n        getCompanionIcon(userId)\r\n\r\n    }\r\n    const onMessageSentChange = (userId: number, bodyMessage: string) => {\r\n        props.postMessageToUserThunkCreator(userId, bodyMessage)\r\n    }\r\n\r\n\r\n\r\n    let [dialogsState, setDialogsState] = useState([] as dialogsType[])\r\n\r\n    useEffect(() => {\r\n        let dialogsArr = [] as dialogsType[]\r\n        if (props.dialogs.length > 0){\r\n        for (let i = 0; i < (props.dialogs.length> 10 ? 10 : props.dialogs.length); i++) {\r\n            dialogsArr.push(props.dialogs[i])\r\n        }}\r\n        setDialogsState(dialogsArr)\r\n        console.log(dialogsArr)\r\n    }, [props.dialogs, props.dialogId])\r\n    /*const getUsersIcon = (senderId: number) => {\r\n        return props.getSenderIconThunkCreator(senderId)\r\n\r\n    }*/\r\n\r\n\r\n    let dialogUsers =\r\n        props.dialogs[0] ?\r\n        dialogsState.map(\r\n        d => <DialogItem\r\n            name={d.userName}\r\n            id={d.id}\r\n            key={d.id}\r\n            onGetMessagesUser={onGetMessagesUser}/>\r\n        ) : <NavLink to={'/users'}>Search friends</NavLink>;\r\n\r\n    let messagesItem =\r\n        props.messages[0] ?\r\n            props.messages.map(\r\n                m =>\r\n                    <MessagesItem\r\n                        message={m.body}\r\n                        key={m.id}\r\n                        senderId={m.senderId}\r\n                        OwnerId={props.OwnerId}\r\n                        companionIcon={props.companionIcon}\r\n                        ownerPhoto={props.ownerPhoto}\r\n                        viewed={m.viewed}\r\n                    />\r\n            ) : <div><h3 className={s.h3text}>start chatting first</h3></div>\r\n    return (\r\n        <div className={s.dialogs}>\r\n            <div className={s.dialogsUsers}>\r\n                {dialogUsers}\r\n            </div>\r\n\r\n            <div className={s.messages}>\r\n                <div className={s.message}>\r\n                    {messagesItem}\r\n                </div>\r\n                <div className={s.addMessage}>\r\n                    <AddMessage\r\n                        dialogId={props.dialogId}\r\n                        onMessageSentChange={onMessageSentChange}\r\n                    />\r\n                </div>\r\n            </div>\r\n        </div>\r\n\r\n    )\r\n}\r\n\r\nexport default Dialogs","import React from \"react\";\r\nimport {\r\n    getDialogsThunkCreator,\r\n    getMessagesUserThunkCreator,\r\n    postMessageToUserThunkCreator, setCompanionIconAC\r\n} from \"../../Redux/dialogs_reducer\";\r\nimport Dialogs from \"./Dialogs\";\r\nimport {connect} from \"react-redux\";\r\nimport {RootState} from \"../../Redux/reduxStore\";\r\nimport {compose} from \"redux\";\r\nimport {withAuthNavigate} from \"../hoc/witAuthNavigate\";\r\n\r\nlet mapStateToProps = (state: RootState) => {\r\n    return {\r\n        dialogs: state.dialogs.dialogs,\r\n        messages: state.dialogs.messages,\r\n        isAuth: state.auth.isAuth,\r\n        dialogId: state.dialogs.dialogId,\r\n        OwnerId: state.auth.userId,\r\n        companionId: state.dialogs.companionId,\r\n        companionIcon: state.dialogs.companionIcon,\r\n        defaultPhoto: state.dialogs.defaultPhoto,\r\n        ownerPhoto: state.auth.ownerPhoto\r\n    }\r\n}\r\n\r\nexport default compose(\r\n    connect(mapStateToProps, {\r\n        getDialogsThunkCreator,\r\n        getMessagesUserThunkCreator,\r\n        postMessageToUserThunkCreator,\r\n        setCompanionIconAC,\r\n    }),\r\n    withAuthNavigate\r\n)(Dialogs)","import React, {FC} from 'react'\r\nimport {connect} from \"react-redux\";\r\nimport {Navigate} from 'react-router-dom';\r\nimport {RootState} from \"../../Redux/reduxStore\";\r\n\r\nlet mapStateToProps = (state: RootState) => {\r\n    return {\r\n        isAuth: state.auth.isAuth\r\n    }\r\n}\r\nexport const withAuthNavigate = (Component: FC<any>) => {\r\n\r\n    class NavigateComponent extends React.Component<{isAuth: boolean}> {\r\n        render() {\r\n            if (!this.props.isAuth) {\r\n                return <Navigate to={'/login'}/>\r\n            }\r\n            return <Component {...this.props} />\r\n        }\r\n    }\r\n\r\n    let ConnectWithAuthNavigate = connect(mapStateToProps)(NavigateComponent)\r\n\r\n    return ConnectWithAuthNavigate\r\n}\r\n"],"names":["DialogItem","props","to","id","onClick","onGetMessagesUser","className","dialogsData","isActive","s","name","MessagesItem","message","replace","console","log","senderIcon","senderId","OwnerId","ownerPhoto","companionIcon","src","viewed","AddMessageForm","validationSchema","yup","initialValues","textMessage","validateOnBlur","onSubmit","values","resetForm","onMessageSentChange","dialogId","addMessageElement","undefined","handleBlur","handleChange","isValid","handleSubmit","dirty","type","onChange","onBlur","value","placeholder","disabled","AddMessage","useEffect","getDialogsThunkCreator","userId","getMessagesUserThunkCreator","dialogs","find","i","setCompanionIconAC","photos","large","defaultPhoto","getCompanionIcon","useState","dialogsState","setDialogsState","dialogsArr","length","push","dialogUsers","map","d","userName","messagesItem","messages","m","body","bodyMessage","postMessageToUserThunkCreator","compose","connect","state","isAuth","auth","companionId","withAuthNavigate","Dialogs","mapStateToProps","Component","NavigateComponent","this","React"],"sourceRoot":""}