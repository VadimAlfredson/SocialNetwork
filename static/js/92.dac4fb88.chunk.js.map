{"version":3,"file":"static/js/92.dac4fb88.chunk.js","mappings":"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","sources":["webpack://react-vadim/./src/components/Users/users.module.css?9211","webpack://react-vadim/./src/components/common/Paginator/paginator.module.css?28dc","components/common/Paginator/Paginator.tsx","components/Users/formSearchUsers.tsx","components/Users/Users.tsx","components/Users/UsersContainer.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"usersComponent\":\"users_usersComponent__8nRZo\",\"itemUser\":\"users_itemUser__x5owb\",\"avatar\":\"users_avatar__erVMZ\",\"infoUser\":\"users_infoUser__y2HtR\",\"followButton\":\"users_followButton__ExoVv\",\"massageButton\":\"users_massageButton__-K1Un\",\"buttonStyle\":\"users_buttonStyle__jG05x\",\"nameUser\":\"users_nameUser__9hBV1\",\"statusUser\":\"users_statusUser__F2WyE\",\"navLinkToLogin\":\"users_navLinkToLogin__wH+jC\",\"formSearchBlock\":\"users_formSearchBlock__2WRRL\",\"searchInput\":\"users_searchInput__2r7sY\",\"searchButton\":\"users_searchButton__ZGCpm\",\"searchCheckbox\":\"users_searchCheckbox__LqUAR\",\"searchText\":\"users_searchText__DnfT0\"};","// extracted by mini-css-extract-plugin\nexport default {\"activePage\":\"paginator_activePage__eWc4N\",\"paginator\":\"paginator_paginator__QVHI9\",\"pageNumber\":\"paginator_pageNumber__7A1XW\"};","import React, {FC, useEffect, useState} from \"react\";\r\nimport s from \"../Paginator/paginator.module.css\"\r\nimport {useAppSelector} from \"../../../Redux/reduxStore\";\r\n\r\ntype PropsType = {\r\n    onPageChange: (p: number, pageSize: number, term: string, friend?: boolean) => void\r\n}\r\n\r\nlet Paginator: FC<PropsType> = (props) => {\r\n\r\n    const pageSize = useAppSelector(state => state.users.pageSize)\r\n    const totalUsersCount = useAppSelector(state => state.users.totalUsersCount)\r\n    const currentPage = useAppSelector(state => state.users.currentPage)\r\n    const term = useAppSelector(state => state.users.term)\r\n    const friend = useAppSelector(state => state.users.friends)\r\n\r\n    let [activePage, setActivePage] = useState(1)\r\n    let firstPage = activePage > 2 ? activePage - 2 : activePage > 1 ? activePage -1 : 1\r\n    let pageCount = Math.ceil(totalUsersCount / pageSize);\r\n    let pages = [];\r\n    for (let i = firstPage; i <= pageCount; i++) {\r\n        pages.push(i)\r\n    }\r\n\r\n    useEffect(() => {\r\n        setActivePage(currentPage ? currentPage : 1)\r\n    }, [currentPage])\r\n\r\n    return (\r\n        <div className={s.paginator}>\r\n            {activePage > 3 &&\r\n                <span className={currentPage === 1 ? s.activePage : s.pageNumber}\r\n                                         onClick={() => {\r\n                                             props.onPageChange(1, pageSize, term)\r\n                                             setActivePage(1)\r\n                                         }} key={1}\r\n                            >{1}</span>\r\n                        }\r\n            {activePage > 4 &&\r\n                <button className={s.pageNumber} onClick={() => {\r\n                    setActivePage(activePage => activePage-1)\r\n                    if (friend === true) {\r\n                        props.onPageChange(activePage, pageSize, term, friend)\r\n                    } else {\r\n                        props.onPageChange(activePage, pageSize, term)\r\n                    }\r\n                }}>{`<<`}</button>\r\n            }\r\n            {pages\r\n                .filter(p => p >= firstPage && p <= activePage + 2)\r\n                .map(p => {\r\n                        return <span className={currentPage === p ? s.activePage : s.pageNumber}\r\n                                     onClick={() => {\r\n                                         if (friend === true) {\r\n                                             props.onPageChange(p, pageSize, term, friend)\r\n                                         } else {\r\n                                             props.onPageChange(p, pageSize, term)\r\n                                         }\r\n                                         setActivePage(p)\r\n                                     }} key={p}\r\n                        >{p}</span>\r\n                    }\r\n                )}\r\n\r\n            {activePage < pageCount -2 &&\r\n                <button className={s.pageNumber}\r\n                        onClick={() => {\r\n                            setActivePage(activePage => activePage+1)\r\n                            if (friend === true) {\r\n                                props.onPageChange(activePage, pageSize, term, friend)\r\n                            } else {\r\n                                props.onPageChange(activePage, pageSize, term)\r\n                            }\r\n                        }}\r\n                >{`>>`}</button>\r\n            }\r\n            {activePage < pageCount - 2 &&\r\n                <span className={currentPage === pageCount ? s.activePage : s.pageNumber}\r\n                                         onClick={() => {\r\n                                             props.onPageChange(pageCount, pageSize, term)\r\n                                             setActivePage(pageCount)\r\n                                         }} key={pageCount}\r\n                            >{pageCount}</span>\r\n                        }\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default Paginator\r\n\r\n/*\r\n\r\nlet Paginator: FC<PropsType> = (props) => {\r\n    const pageSize = useAppSelector(state => state.users.pageSize)\r\n    const totalUsersCount = useAppSelector(state => state.users.totalUsersCount)\r\n    const currentPage = useAppSelector(state => state.users.currentPage)\r\n    const term = useAppSelector(state => state.users.term)\r\n    const friend = useAppSelector(state => state.users.friends)\r\n\r\n\r\n    let pageCount = Math.ceil(totalUsersCount / pageSize);\r\n    let pages = [];\r\n    for (let i = 1; i <= pageCount; i++) {\r\n        pages.push(i)\r\n    }\r\n    ;\r\n    let portionSize = 5\r\n    let portionCount = Math.ceil(pageCount / portionSize)\r\n    let [portionNumber, setPortionNumber] = useState(1)\r\n    let leftPortionNumber = (portionNumber - 1) * portionSize + 1\r\n    let rightPortionNumber = portionNumber * portionSize\r\n    return (\r\n        <div className={s.paginator}>\r\n            {portionNumber > 1 &&\r\n                pages\r\n                    .filter(p => p === 1)\r\n                    .map(p => {\r\n                            return <span className={currentPage === p ? s.activePage : s.pageNumber}\r\n                                         onClick={() => {\r\n                                             props.onPageChange(p, pageSize, term)\r\n                                         }} key={p}\r\n                            >{p}</span>\r\n                        }\r\n                    )\r\n            }\r\n            {portionNumber > 1 &&\r\n                <button className={s.pageNumber} onClick={() => {\r\n                    setPortionNumber(portionNumber - 1)\r\n                }}>{`<<`}</button>\r\n            }\r\n            {pages\r\n                .filter(p => p >= leftPortionNumber && p <= rightPortionNumber)\r\n                .map(p => {\r\n                        return <span className={currentPage === p ? s.activePage : s.pageNumber}\r\n                                     onClick={() => {\r\n                                         if (friend === true) {\r\n                                             props.onPageChange(p, pageSize, term, friend)\r\n                                         } else {\r\n                                             props.onPageChange(p, pageSize, term)\r\n                                         }\r\n                                     }} key={p}\r\n                        >{p}</span>\r\n                    }\r\n                )}\r\n\r\n            {portionCount > portionNumber &&\r\n                <button className={s.pageNumber}\r\n                        onClick={() => {\r\n                            setPortionNumber(portionNumber + 1)\r\n                        }}\r\n                >{`>>`}</button>\r\n            }\r\n            {portionCount > portionNumber &&\r\n                pages\r\n                    .filter(p => p === pageCount)\r\n                    .map(p => {\r\n                            // @ts-ignore\r\n                            return <span className={currentPage === p ? s.activePage : s.pageNumber}\r\n                                         onClick={() => {\r\n                                             props.onPageChange(p, pageSize, term)\r\n                                         }} key={p}\r\n                            >{p}</span>\r\n                        }\r\n                    )}\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default Paginator*/\r\n","import React, {FC, useEffect, useState} from \"react\";\r\nimport {Formik} from \"formik\";\r\nimport * as yup from \"yup\";\r\nimport s from './users.module.css';\r\nimport {useAppSelector} from \"../../Redux/reduxStore\";\r\n\r\ntype PropsType = {\r\n    onUsersChange: (pageNumber: number, pageSize: number, term: string, friends: boolean) => void\r\n}\r\n\r\nconst FormSearchUsers: FC<PropsType> = (props) => {\r\n    const pageSize =  useAppSelector(state => state.users.pageSize)\r\n    const validationSchema = yup.object().shape({\r\n        search: yup.string(),\r\n    })\r\n\r\n    return <Formik\r\n        initialValues={{\r\n            search: '',\r\n            subscriptionsCheckbox: false,\r\n        }}\r\n        validateOnBlur\r\n        onSubmit={(values => {\r\n            console.log(values)\r\n            props.onUsersChange(1, pageSize, values.search, values.subscriptionsCheckbox)\r\n        })}\r\n        validationSchema={validationSchema}\r\n    >\r\n        {({\r\n              values,\r\n              errors,\r\n              touched,\r\n              handleBlur,\r\n              handleChange,\r\n              isValid,\r\n              handleSubmit,\r\n              dirty\r\n          }) => (\r\n            <div className={s.formSearchBlock}>\r\n                <input\r\n                    className={s.searchInput}\r\n                    type={'text'}\r\n                    name={'search'}\r\n                    onChange={handleChange}\r\n                    onBlur={handleBlur}\r\n                    value={values.search}\r\n                    placeholder={'text'}\r\n                />\r\n                <button\r\n                    className={s.searchButton}\r\n                    /*disabled={!isValid}*/\r\n                    onClick={() => {\r\n                        handleSubmit()\r\n                    }}\r\n                    type={'submit'}\r\n                >Search\r\n                </button>\r\n                <div className={s.searchCheckbox}>\r\n                    <div className={''}>\r\n                        <input\r\n                            type={'checkbox'}\r\n                            name={'subscriptionsCheckbox'}\r\n                            onChange={handleChange}\r\n                            onBlur={handleBlur}\r\n                            value={`${values.subscriptionsCheckbox}`}\r\n                        />\r\n                    </div>\r\n                </div>\r\n                <div className={s.searchText}>Only subscriptions</div>\r\n            </div>\r\n        )}\r\n    </Formik>\r\n};\r\n\r\nexport default FormSearchUsers\r\n","import React, {FC, useEffect, useState} from \"react\";\r\nimport {onChangeUsersThunkCreator, onFollowChangeThunkCreator, UserType} from \"../../Redux/users_reducers\";\r\nimport s from \"../Users/users.module.css\"\r\nimport {NavLink, useLocation, useNavigate} from \"react-router-dom\";\r\nimport Paginator from \"../common/Paginator/Paginator\";\r\nimport Preloader from \"../common/Preloader/Preloader\";\r\nimport {putDialogUserThunkCreator} from \"../../Redux/dialogs_reducer\";\r\nimport FormSearchUsers from \"./formSearchUsers\";\r\nimport {useAppDispatch, useAppSelector} from \"../../Redux/reduxStore\";\r\n\r\ntype paramsType = {\r\n    key: string\r\n    value: string\r\n}\r\n\r\n\r\nlet Users: FC = (props) => {\r\n    const users = useAppSelector(state => state.users.users)\r\n    const followingInProgress = useAppSelector(state => state.users.followingInProgress)\r\n    const isAuth = useAppSelector(state => state.auth.isAuth)\r\n    const isFetching = useAppSelector(state => state.users.isFetching)\r\n    const term = useAppSelector(state => state.users.term)\r\n    const friends = useAppSelector(state => state.users.friends)\r\n    const pageSize = useAppSelector(state => state.users.pageSize)\r\n    const currentPage = useAppSelector(state => state.users.currentPage)\r\n\r\n    let [pageNumber, setPageNumber] = useState(1)\r\n\r\n\r\n    const navigate = useNavigate()\r\n    const dispatch = useAppDispatch()\r\n    let location = useLocation()\r\n\r\n\r\n    let onUsersChange = (pageNumber: number, pageSize: number, term: string, friend?: boolean) => {\r\n        /*dispatch(onChangeUsersThunkCreator(pageNumber, pageSize, term, friend))*/\r\n        navigate({\r\n            pathname: '/users',\r\n            search: term || friend || pageNumber ? \"?\" +\r\n                (pageNumber ? `pageNumber=${pageNumber}${term || friend ? '&' : ''}` : '') +\r\n                (term ? `term=${term}${friend ? '&' : ''}` : '') +\r\n                (friend === true ? `friend=${friend}` : '')\r\n                : ''\r\n        })\r\n        dispatch(onChangeUsersThunkCreator(pageNumber, pageSize, term || '', friend))\r\n        /*setPageNumber(pageNumber)*/\r\n    }\r\n\r\n    let onFollowChange = (userId: number, follow: boolean) => {\r\n        dispatch(onFollowChangeThunkCreator(userId, follow))\r\n    }\r\n\r\n    let onDialogUserChange = (userId: number) => {\r\n        dispatch(putDialogUserThunkCreator(userId))\r\n    }\r\n\r\n    useEffect(() => {\r\n        let {search} = location\r\n        let arr = search.substring(1).split('&').reduce((params: any, param) => {\r\n            let [key, value] = param.split('=');\r\n            params[key] = value ? decodeURIComponent(value.replace(/\\+/g, '')) : \"\";\r\n            return params;\r\n        }, {})\r\n        let friendValue = arr.friend === 'true' ? true : undefined\r\n        if (pageNumber != +arr.pageNumber ||\r\n            term != (arr.term ? arr.term : '') ||\r\n            friends != friendValue) {\r\n            onUsersChange(+arr.pageNumber, pageSize, arr.term || '', friendValue)\r\n        }\r\n    }, [location.search])\r\n\r\n    console.log('rerender users' + currentPage)\r\n\r\n    useEffect(() => {\r\n        navigate({\r\n            pathname: '/users',\r\n            search: term || friends || pageNumber ? \"?\" +\r\n                (pageNumber ? `pageNumber=${pageNumber}${term || friends ? '&' : ''}` : '') +\r\n                (term ? `term=${term}${friends ? '&' : ''}` : '') +\r\n                (friends === true ? `friend=${friends}` : '')\r\n                : ''\r\n        })\r\n    }, [])\r\n\r\n    /*useEffect(() => {\r\n        state != isAuth ? setState(isAuth) : console.log('useEffect')\r\n    }, [isAuth])*/\r\n    return (\r\n        <div className={s.usersComponent}>\r\n            <Paginator\r\n                onPageChange={onUsersChange}\r\n            />\r\n            <FormSearchUsers\r\n                onUsersChange={onUsersChange}\r\n            />\r\n            {isFetching ? <Preloader/> :\r\n                <div>\r\n                    {\r\n                        users.map((u: UserType) => <div className={s.itemUser} key={u.id}>\r\n                            <div className={s.avatar}>\r\n                                <NavLink to={'/profile/' + u.id}>\r\n                                    <img src={u.photos.small !== null ? u.photos.small :\r\n                                        'https://shapka-youtube.ru/wp-content/uploads/2021/02/avatarka-dlya-skaypa-dlya-parney.jpg'\r\n                                    } alt={'картинка'}/>\r\n                                </NavLink>\r\n                            </div>\r\n                            <div className={s.followButton}>\r\n                                {isAuth ?\r\n                                    <button className={s.buttonStyle}\r\n                                            disabled={followingInProgress.includes(u.id)}\r\n                                            onClick={() => (onFollowChange(u.id, u.followed))\r\n                                            }>{u.followed ? 'Unfollow' : 'Follow'}\r\n                                    </button> : <NavLink className={s.navLinkToLogin} to={\"../login\"}>\r\n                                        Register to subscribe\r\n                                    </NavLink>}\r\n                            </div>\r\n                            <div className={s.massageButton}>\r\n                                {isAuth &&\r\n                                    <NavLink to={`/dialogs/${u.id}`}>\r\n                                        <button className={s.buttonStyle}\r\n                                                onClick={() => {\r\n                                                    onDialogUserChange(u.id)\r\n                                                }}>Message\r\n                                        </button>\r\n                                    </NavLink>}\r\n                            </div>\r\n\r\n                            <div className={s.infoUser}>\r\n                                <div className={s.nameUser}>{u.name}</div>\r\n                                <div className={s.statusUser}>{u.status}</div>\r\n                            </div>\r\n                        </div>)}\r\n                </div>}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Users","import React, {FC, useEffect} from \"react\";\r\nimport {connect} from \"react-redux\";\r\nimport Users from \"./Users\";\r\nimport {RootState, useAppDispatch, useAppSelector} from \"../../Redux/reduxStore\";\r\nimport {\r\n    followed,\r\n    setCurrentPage,\r\n    toggleIsFetching,\r\n    setTotalUsersCount,\r\n    setUsers,\r\n    toggleIsFollowing,\r\n    getUsersThunkCreator,\r\n    onChangeUsersThunkCreator,\r\n    onFollowChangeThunkCreator, UserType,\r\n} from \"../../Redux/users_reducers\";\r\nimport {compose} from \"redux\";\r\nimport {putDialogUserThunkCreator} from \"../../Redux/dialogs_reducer\";\r\n\r\n\r\nconst UsersContainer: FC<{}> = (props) => {\r\n    const dispatch = useAppDispatch()\r\n    const pageSize =  useAppSelector(state => state.users.pageSize)\r\n    const currentPage = useAppSelector(state => state.users.currentPage)\r\n    useEffect(() => {\r\n        dispatch(getUsersThunkCreator(currentPage, pageSize))}, []\r\n    )\r\n\r\n\r\n\r\n        return <>\r\n            <Users\r\n            />\r\n        </>\r\n\r\n\r\n}\r\n\r\nexport default UsersContainer"],"names":["props","pageSize","useAppSelector","state","users","totalUsersCount","currentPage","term","friend","friends","useState","activePage","setActivePage","firstPage","pageCount","Math","ceil","pages","i","push","useEffect","className","s","onClick","onPageChange","filter","p","map","validationSchema","yup","shape","search","initialValues","subscriptionsCheckbox","validateOnBlur","onSubmit","values","console","log","onUsersChange","handleBlur","errors","touched","handleChange","handleSubmit","isValid","dirty","type","name","onChange","onBlur","value","placeholder","followingInProgress","isAuth","auth","isFetching","pageNumber","navigate","useNavigate","dispatch","useAppDispatch","location","useLocation","pathname","onChangeUsersThunkCreator","arr","substring","split","reduce","params","param","key","decodeURIComponent","replace","friendValue","undefined","Preloader","u","to","id","src","photos","small","alt","disabled","includes","userId","follow","followed","onFollowChangeThunkCreator","putDialogUserThunkCreator","status","getUsersThunkCreator"],"sourceRoot":""}