{"version":3,"file":"static/js/742.fd0b0015.chunk.js","mappings":"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","sources":["webpack://react-vadim/./src/components/Dialogs/Dialogs.module.css?1b2e","components/Dialogs/DialogItem/DialogItem.tsx","components/Dialogs/MessagesItem/MessagesItem.tsx","components/Dialogs/AddMessage/AddMessageForm.tsx","components/Dialogs/AddMessage/AddMessage.tsx","components/Dialogs/Dialogs.tsx","components/Dialogs/DialogsContainer.tsx","components/hoc/witAuthNavigate.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"dialogs\":\"Dialogs_dialogs__GBcEp\",\"dialogsTitle\":\"Dialogs_dialogsTitle__bxfTn\",\"dialogsUsers\":\"Dialogs_dialogsUsers__LBmt6\",\"dialogDiv\":\"Dialogs_dialogDiv__uycfj\",\"dialogItem\":\"Dialogs_dialogItem__k9CuM\",\"active\":\"Dialogs_active__zK1A-\",\"titleMessages\":\"Dialogs_titleMessages__2oe-t\",\"messages\":\"Dialogs_messages__Ly6dr\",\"addMessage\":\"Dialogs_addMessage__+SI4K\",\"inputAddMessage\":\"Dialogs_inputAddMessage__KTTQa\",\"buttonAddMessage\":\"Dialogs_buttonAddMessage__gnvoU\",\"divAddMessage\":\"Dialogs_divAddMessage__EcDqL\",\"iconMessage\":\"Dialogs_iconMessage__L+5-e\",\"message\":\"Dialogs_message__pyaWz\",\"divMessage\":\"Dialogs_divMessage__lpG8t\",\"messageForm\":\"Dialogs_messageForm__5uYWH\",\"divOwnerMessage\":\"Dialogs_divOwnerMessage__vv-7J\",\"ownerMessageForm\":\"Dialogs_ownerMessageForm__zHNC0\",\"textMessage\":\"Dialogs_textMessage__rleMB\",\"ownerTextMessage\":\"Dialogs_ownerTextMessage__Sdmym\",\"h3text\":\"Dialogs_h3text__5icbU\"};","import s from \"../Dialogs.module.css\";\r\nimport {NavLink} from \"react-router-dom\";\r\nimport React from \"react\";\r\n\r\n\r\nexport const DialogItem = (props: {id: number, name: string, onGetMessagesUser: (userId: number) => void}) => {\r\n\r\n    return <NavLink to={\"/dialogs/\" + props.id} onClick={() => {props.onGetMessagesUser(props.id)}}\r\n                 className={dialogsData => dialogsData.isActive ? s.active : s.dialogItem}>\r\n        {props.name}\r\n    </NavLink>\r\n};","import React, {useEffect, useState} from \"react\";\r\nimport s from \"../Dialogs.module.css\";\r\nimport {dialogsType} from \"../../../Redux/dialogs_reducer\";\r\nimport dialogs from \"../Dialogs\";\r\n\r\nexport const MessagesItem = (props: {\r\n    message: string,\r\n    dialogs: dialogsType[],\r\n    dialogId: number\r\n    senderIcon: string\r\n    /*getUsersIcon: (senderId: number) => void*/\r\n    senderId: number\r\n    OwnerId: number\r\n    OwnerIcon: string\r\n    companionIcon: string\r\n    ownerPhoto: string\r\n}) => {\r\n    let senderIcon = props.senderId === props.OwnerId ? props.ownerPhoto : props.companionIcon\r\n    /*useEffect(() => {props.getUsersIcon(props.senderId)}, [props.senderId])*/\r\n    return <div className={props.senderId === props.OwnerId ? s.divOwnerMessage : s.divMessage}>\r\n        <div>\r\n            <img className={s.iconMessage} src={senderIcon}/>\r\n        </div>\r\n        <div className={props.senderId === props.OwnerId ? s.ownerMessageForm : s.messageForm}>\r\n            <a className={props.senderId === props.OwnerId ? s.ownerTextMessage : s.textMessage}>{props.message}</a>\r\n        </div>\r\n    </div>\r\n}","import React from \"react\";\r\nimport {dialogsPageType} from \"../../../Redux/dialogs_reducer\";\r\nimport s from \"../Dialogs.module.css\";\r\nimport {Formik} from \"formik\";\r\nimport * as yup from \"yup\";\r\n\r\nexport const AddMessageForm = (props: {\r\n    onMessageSentChange: (userId: number, bodyMessage: string) => void\r\n    dialogId: number\r\n}) => {\r\n    const validationSchema = yup.string()\r\n    let addMessageElement = (values: string) => {\r\n        debugger\r\n        props.onMessageSentChange(props.dialogId, values);\r\n    }\r\n    return <Formik\r\n        initialValues={{\r\n            textMessage: '',\r\n        }}\r\n        validateOnBlur\r\n        onSubmit={(values, {resetForm}) => {\r\n            addMessageElement(values.textMessage)\r\n            console.log(values.textMessage)\r\n            resetForm({values: undefined})\r\n        }}\r\n        validationSchema={validationSchema}\r\n    >\r\n        {({\r\n            values,\r\n            handleBlur,\r\n            handleChange,\r\n            isValid,\r\n            handleSubmit,\r\n            dirty\r\n        }) => (\r\n        <div className={s.divAddMessage}>\r\n            <input\r\n                className={s.inputAddMessage}\r\n                type={'textarea'}\r\n                name={'textMessage'}\r\n                onChange={handleChange}\r\n                onBlur={handleBlur}\r\n                value={values.textMessage}\r\n                placeholder={'Add new message'}\r\n            /><br/>\r\n            <button\r\n                className={s.buttonAddMessage}\r\n                disabled={!isValid && !dirty}\r\n                onClick={() => {handleSubmit()}}\r\n                type={'submit'}\r\n            >Sent\r\n            </button>\r\n        </div>\r\n    )}\r\n    </Formik>\r\n}\r\n","import React from \"react\";\r\nimport {dialogsPageType} from \"../../../Redux/dialogs_reducer\";\r\nimport {AddMessageForm} from \"./AddMessageForm\";\r\n\r\nexport const AddMessage = (props: {\r\n    onMessageSentChange: (userId: number, bodyMessage: string) => void\r\n    dialogId: number\r\n}) => {\r\n    return (\r\n        <AddMessageForm\r\n            dialogId={props.dialogId}\r\n            onMessageSentChange={props.onMessageSentChange}\r\n        />\r\n    )\r\n}\r\n","import React, {useEffect, useState} from \"react\";\r\nimport s from './Dialogs.module.css';\r\nimport {DialogItem} from \"./DialogItem/DialogItem\";\r\nimport {MessagesItem} from \"./MessagesItem/MessagesItem\";\r\nimport {AddMessage} from \"./AddMessage/AddMessage\";\r\nimport {\r\n    dialogsType, messageType,\r\n} from \"../../Redux/dialogs_reducer\";\r\n\r\n\r\nconst Dialogs = (props: {\r\n                     dialogs: dialogsType[],\r\n                     messages: messageType[],\r\n                     AddMessageInDialogs: () => void,\r\n                     isAuth: boolean\r\n                     textMessage: string\r\n                     getDialogsThunkCreator: () => void\r\n                     getMessagesUserThunkCreator: (userId: number) => void\r\n                     postMessageToUserThunkCreator: (userId: number, bodyMessage: string) => void\r\n                     dialogId: number\r\n                     getSenderIconThunkCreator: (senderId: number) => void\r\n                     senderIcon: string\r\n                     OwnerId: number\r\n                     OwnerIcon: string\r\n                     companionId: number\r\n                     companionIcon: string\r\n                     setCompanionIconAC: (photo: string | null) => void\r\n                     defaultPhoto: string\r\n                     ownerPhoto: string\r\n                 }\r\n) => {\r\n    /*    const [dialogs, setDialogs] = useState(props.dialogs);\r\n        const [messages, setMessages] = useState(props.messages);*/\r\n    /*props.getDialogsThunkCreator()*/\r\n    useEffect(() => {\r\n        props.getDialogsThunkCreator()\r\n    }, [])\r\n    let getCompanionIcon = (userId: number) => {\r\n        props.dialogs.find(i =>\r\n            i.id === userId ?\r\n                props.setCompanionIconAC(i.photos.large ? i.photos.large : props.defaultPhoto) :\r\n                props.setCompanionIconAC(props.defaultPhoto))\r\n    }\r\n    const onGetMessagesUser = (userId: number) => {\r\n        props.getMessagesUserThunkCreator(userId)\r\n        getCompanionIcon(userId)\r\n\r\n    }\r\n\r\n    const onMessageSentChange = (userId: number, bodyMessage: string) => {\r\n        props.postMessageToUserThunkCreator(userId, bodyMessage)\r\n    }\r\n\r\n    /*const getUsersIcon = (senderId: number) => {\r\n        return props.getSenderIconThunkCreator(senderId)\r\n\r\n    }*/\r\n\r\n\r\n    let dialogUsers = props.dialogs.map(\r\n        d => <DialogItem\r\n            name={d.userName}\r\n            id={d.id}\r\n            key={d.id}\r\n            onGetMessagesUser={onGetMessagesUser}/>\r\n    );\r\n\r\n    let messagesItem =\r\n        props.messages[0] ?\r\n            props.messages.map(\r\n                m =>\r\n                    <MessagesItem\r\n                        dialogs={props.dialogs}\r\n                        message={m.body}\r\n                        key={m.id}\r\n                        dialogId={props.dialogId}\r\n                        senderIcon={props.senderIcon}\r\n                        /*getUsersIcon={getUsersIcon}*/\r\n                        senderId={m.senderId}\r\n                        OwnerId={props.OwnerId}\r\n                        OwnerIcon={props.OwnerIcon}\r\n                        companionIcon={props.companionIcon}\r\n                        ownerPhoto={props.ownerPhoto}\r\n                    />\r\n            ) : <div><h3 className={s.h3text}>start chatting first</h3></div>\r\n    return (\r\n        <div className={s.dialogs}>\r\n            <div className={s.dialogsUsers}>\r\n                <div className={s.dialogsTitle}>Dialogs</div>\r\n                {dialogUsers}\r\n            </div>\r\n\r\n            <div className={s.messages}>\r\n                <div className={s.titleMessages}>Messages</div>\r\n                <div className={s.message}>\r\n                    {messagesItem}\r\n                </div>\r\n                <div className={s.addMessage}>\r\n                    <AddMessage\r\n                        dialogId={props.dialogId}\r\n                        onMessageSentChange={onMessageSentChange}\r\n                    />\r\n                </div>\r\n            </div>\r\n        </div>\r\n\r\n    )\r\n}\r\n\r\nexport default Dialogs","import React from \"react\";\r\nimport {\r\n    getDialogsThunkCreator,\r\n    getMessagesUserThunkCreator,\r\n    /*getSenderIconThunkCreator,*/\r\n    postMessageToUserThunkCreator, setCompanionIconAC\r\n} from \"../../Redux/dialogs_reducer\";\r\nimport Dialogs from \"./Dialogs\";\r\nimport {connect} from \"react-redux\";\r\nimport {AddStateType} from \"../../Redux/reduxStore\";\r\nimport {compose} from \"redux\";\r\nimport {withAuthNavigate} from \"../hoc/witAuthNavigate\";\r\n\r\nlet mapStateToProps = (state: AddStateType) => {\r\n    return {\r\n        dialogs: state.dialogsPage.dialogs,\r\n        messages: state.dialogsPage.messages,\r\n        isAuth: state.auth.isAuth,\r\n        dialogId: state.dialogsPage.dialogId,\r\n        senderIcon: state.dialogsPage.senderIcon,\r\n        OwnerId: state.auth.userId,\r\n        OwnerIcon: state.dialogsPage.OwnerIcon,\r\n        companionId: state.dialogsPage.companionId,\r\n        companionIcon: state.dialogsPage.companionIcon,\r\n        defaultPhoto: state.dialogsPage.defaultPhoto,\r\n        ownerPhoto: state.auth.ownerPhoto\r\n    }\r\n}\r\n\r\nexport default compose(\r\n    connect(mapStateToProps, {\r\n        getDialogsThunkCreator,\r\n        getMessagesUserThunkCreator,\r\n        postMessageToUserThunkCreator,\r\n        /*getSenderIconThunkCreator,*/\r\n        setCompanionIconAC,\r\n    }),\r\n    withAuthNavigate\r\n)(Dialogs)","import React, {FC} from 'react'\r\nimport {connect} from \"react-redux\";\r\nimport {Navigate} from 'react-router-dom';\r\nimport {AddStateType} from \"../../Redux/reduxStore\";\r\n\r\nlet mapStateToProps = (state: AddStateType) => {\r\n    return {\r\n        isAuth: state.auth.isAuth\r\n    }\r\n}\r\nexport const withAuthNavigate = (Component: FC<any>) => {\r\n\r\n    class NavigateComponent extends React.Component<{isAuth: boolean}> {\r\n        render() {\r\n            if (!this.props.isAuth) {\r\n                return <Navigate to={'/login'}/>\r\n            }\r\n            return <Component {...this.props} />\r\n        }\r\n    }\r\n\r\n    let ConnectWithAuthNavigate = connect(mapStateToProps)(NavigateComponent)\r\n\r\n    return ConnectWithAuthNavigate\r\n}\r\n"],"names":["DialogItem","props","to","id","onClick","onGetMessagesUser","className","dialogsData","isActive","s","name","MessagesItem","senderIcon","senderId","OwnerId","ownerPhoto","companionIcon","src","message","AddMessageForm","validationSchema","yup","initialValues","textMessage","validateOnBlur","onSubmit","values","resetForm","onMessageSentChange","dialogId","addMessageElement","console","log","undefined","handleBlur","handleChange","isValid","handleSubmit","dirty","type","onChange","onBlur","value","placeholder","disabled","AddMessage","useEffect","getDialogsThunkCreator","userId","getMessagesUserThunkCreator","dialogs","find","i","setCompanionIconAC","photos","large","defaultPhoto","getCompanionIcon","dialogUsers","map","d","userName","messagesItem","messages","m","body","OwnerIcon","bodyMessage","postMessageToUserThunkCreator","compose","connect","state","dialogsPage","isAuth","auth","companionId","withAuthNavigate","Dialogs","mapStateToProps","Component","NavigateComponent","this","React"],"sourceRoot":""}